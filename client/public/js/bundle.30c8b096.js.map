{"version":3,"sources":["node_modules/browser-pack/_prelude.js","client/app/app.js","client/app/components/dashboard/dashboard.ctrl.js","client/app/components/dashboard/index.js","client/app/components/home/calorious-login/calorious-login.directive.js","client/app/components/home/home.ctrl.js","client/app/components/home/index.js","client/app/shared/filters/index.js","client/app/shared/navbar/index.js","client/app/shared/navbar/navbar.directive.js","node_modules/angular-sanitize/angular-sanitize.js","node_modules/angular-sanitize/index.js","node_modules/angular-ui-router/release/angular-ui-router.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","angular","name","config","$stateProvider","$urlRouterProvider","$interpolateProvider","$mdThemingProvider","state","url","templateUrl","controller","definePalette","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","contrastDefaultColor","contrastDarkColors","contrastLightColors","undefined","theme","primaryPalette","$scope","message","scope","restrict","link","elem","attrs","directive","filter","input","toLowerCase","substring","toUpperCase","$filter","decimals","formatted","Math","abs","format","d3","value","replace","type","abbreviateCurrency","v","title","window","$SanitizeProvider","toMap","str","lowercaseKeys","obj","items","split","lowercase","htmlParserImpl","html","handler","inertBodyElement","innerHTML","mXSSAttempts","$sanitizeMinErr","document","documentMode","stripCustomNsAttrs","node","firstChild","nodeType","start","nodeName","attrToMap","attributes","chars","textContent","nextNode","end","nextSibling","parentNode","removeChild","map","ii","attr","encodeEntities","SURROGATE_PAIR_REGEXP","hi","charCodeAt","low","NON_ALPHANUMERIC_REGEXP","htmlSanitizeWriterImpl","buf","uriValidator","ignoreCurrentElement","out","bind","push","tag","blockedElements","validElements","forEach","key","lkey","isImage","validAttrs","uriAttrs","voidElements","Node","ELEMENT_NODE","attrNode","attrName","lastIndexOf","removeAttributeNode","svgEnabled","this","$get","$$sanitizeUri","extend","svgElements","htmlParser","htmlSanitizeWriter","uri","test","join","enableSvg","isDefined","noop","optionalEndTagBlockElements","optionalEndTagInlineElements","optionalEndTagElements","blockElements","inlineElements","htmlAttrs","svgAttrs","doc","implementation","createHTMLDocument","docElement","documentElement","getDocumentElement","bodyElements","getElementsByTagName","createElement","appendChild","sanitizeText","writer","$$minErr","provider","$sanitize","LINKY_URL_REGEXP","MAILTO_REGEXP","linkyMinErr","isFunction","isObject","isString","text","target","addText","addLink","linkAttributes","attributesFn","match","raw","index","substr","inherit","parent","extra","prototype","merge","dst","arguments","hasOwnProperty","ancestors","first","second","path","objectKeys","object","Object","keys","result","val","indexOf","array","Array","Number","len","from","ceil","floor","inheritParams","currentParams","newParams","$current","$to","parentParams","parents","inherited","inheritList","params","j","equalForKeys","b","k","filterByKeys","values","filtered","pick","copy","concat","apply","slice","omit","collection","callback","isArray","$Resolve","$q","$injector","VISIT_IN_PROGRESS","VISIT_DONE","NOTHING","NO_DEPENDENCIES","NO_LOCALS","NO_PARENT","when","$$promises","$$values","study","invocables","visit","visited","cycle","splice","plan","get","annotate","param","pop","isResolve","then","invocableKeys","locals","self","done","wait","merged","$$inheritedValues","resolution","resolve","fail","reason","$$failure","reject","invoke","invocable","onfailure","invocation","proceed","promise","defer","waitParams","dep","promises","$TemplateFactory","$http","$templateCache","fromConfig","template","fromString","fromUrl","templateProvider","fromProvider","cache","headers","Accept","response","data","UrlMatcher","pattern","parentMatcher","addParameter","id","location","paramNames","$$UMFP","Param","quoteRegExp","string","squash","optional","surroundPattern","matchDetails","m","isSearch","regexp","segment","cfg","last","RegExp","caseInsensitive","placeholder","searchPlaceholder","compiled","segments","$$new","ParamSet","source","p","exec","isOptional","lastIndex","search","sourceSearch","sourcePath","strict","prefix","$$paramNames","Type","$UrlMatcherFactory","valToString","toString","valFromString","getDefaultConfig","isStrictMode","isCaseInsensitive","isInjectable","flushTypeQueue","typeQueue","shift","$types","injector","def","defaultSquashPolicy","enqueue","defaultTypes","encode","decode","is","int","parseInt","bool","date","getFullYear","getMonth","getDate","capture","Date","isNaN","valueOf","equals","toISOString","json","toJson","fromJson","any","identity","$$getDefaultValue","strictMode","compile","isMatcher","definition","definitionFn","unwrapShorthand","isShorthand","$$fn","getType","urlType","getArrayMode","arrayDefaults","arrayParamNomenclature","getSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","to","item","defaultValue","$value","hasReplaceVal","$replace","replacement","$normalize","$asArray","dynamic","$$parent","$$keys","chain","ignore","reverse","paramset","paramValues","$$equals","paramValues1","paramValues2","equal","left","right","$$validates","rawVal","normalized","encoded","$UrlRouterProvider","$locationProvider","$urlMatcherFactory","regExpPrefix","re","interpolate","what","handleIfMatch","$match","$location","$rootScope","$browser","$sniffer","appendBasePath","isHtml5","absolute","baseHref","update","evt","check","rule","handled","defaultPrevented","lastPushedUrl","rules","otherwise","listen","listener","$on","interceptDeferred","sync","read","urlMatcher","options","$$avoidResync","href","validates","html5Mode","enabled","history","hashPrefix","slash","port","protocol","host","redirect","handlerIsString","strategies","matcher","regex","global","sticky","deferIntercept","$inject","$StateProvider","isRelative","stateName","findState","stateOrName","base","isStr","rel","pathLength","current","states","queueState","parentName","queue","flushQueuedChildren","queued","registerState","stateBuilder","$delegates","abstractKey","$stateParams","$state","navigable","transitionTo","isGlob","doesStateMatchGlob","glob","globSegments","unshift","MAX_VALUE","decorator","func","$view","$resolve","$urlRouter","handleRedirect","$broadcast","TransitionAborted","retry","$retry","TransitionFailed","retryTransition","transition","TransitionSuperseded","toParams","resolveState","paramsAreFiltered","resolveViews","viewsPromises","views","view","injectables","$template","load","globals","notify","controllerProvider","injectLocals","$$controller","$$state","$$controllerAs","controllerAs","$$resolveAs","resolveAs","all","TransitionPrevented","root","reload","go","relative","fromParams","fromPath","toState","hash","redirectResult","toPath","keep","toLocals","reloadState","ownParams","shouldSkipReload","resolved","entering","exiting","onExit","onEnter","error","includes","lossy","nav","context","nonSearchParamsEqual","fromAndToState","notSearchParam","nonQueryParamKeys","nonQueryParams","nonQueryParamSet","reloadOnSearch","compositeName","charAt","","abstract","$ViewProvider","$templateFactory","defaults","async","$ViewScrollProvider","useAnchorScroll","$anchorScroll","$timeout","$element","scrollIntoView","$ViewDirective","$uiViewScroll","$interpolate","getService","service","has","getRenderer","statics","enter","element","cb","after","leave","remove","$animate","version","minor","$animator","animate","terminal","priority","transclude","tElement","tAttrs","$transclude","cleanupLastView","previousEl","currentScope","$destroy","currentEl","$uiViewData","renderer","$$animLeave","updateView","firstTime","newScope","getUiViewName","previousLocals","latestLocals","$new","$emit","clone","animEnter","animLeave","viewAnimData","$animEnter","$animLeave","autoScrollExp","$eval","onloadExp","onload","autoscroll","inheritedData","$ViewDirectiveFill","$compile","$controller","initial","resolveData","contents","$onInit","children","uiView","uiViewCreatedBy","parseStateRef","ref","parsed","preparsed","paramExpr","stateContext","el","stateData","getTypeInfo","isSvg","prop","isForm","isAnchor","clickable","clickHook","button","which","ctrlKey","metaKey","shiftKey","preventDefault","ignorePreventDefaultCount","cancel","defaultOpts","$StateRefDirective","uiSrefActive","hookFn","uiSref","active","unlinkInfoFn","uiSrefOpts","$$addStateInfo","$set","$watch","unbind","$StateRefDynamicDirective","runStateRefLink","group","uiState","uiStateParams","uiStateOpts","watch","$StateRefActiveDirective","$attrs","addState","stateParams","activeClass","stateHash","createStateHash","stateInfo","activeClasses","idx","anyMatch","addClass","removeClass","exactMatch","activeEqClass","className","uiSrefActiveEq","newState","deregister","$IsStateFilter","isFilter","$stateful","$IncludedByStateFilter","includesFilter","defaultConfig","searchParams","decodePathArray","reverseString","unquoteDashes","allReversed","paramName","parameters","nTotal","nPath","paramVal","encodeDashes","encodeURIComponent","c","isPathParam","isDefaultValue","nextSegment","isFinalPathParam","$subPattern","sub","mode","ArrayType","bindTo","callbackName","arrayWrap","arrayUnwrap","falsey","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","$arrayMode","run","factory","constant","autoinject"],"mappings":"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","file":"bundle.30c8b096.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n//var angular = require('angular');\nrequire('angular-sanitize');\n//require('angular-animate');\nrequire('angular-ui-router');\n//require('angular-material');\n\nangular.module('app',\n[\n  'ui.router',\n  'ngSanitize',\n  'ngAnimate',\n  'ngMaterial',\n  require('./components/dashboard').name,\n  require('./components/home').name,\n  require('./shared/filters').name,\n])\n.config(\n  [\n    '$stateProvider',\n    '$urlRouterProvider',\n    '$interpolateProvider',\n    '$mdThemingProvider',\n    function (\n      $stateProvider,\n      $urlRouterProvider,\n      $interpolateProvider,\n      $mdThemingProvider) {\n\n      $stateProvider\n        .state('home', {\n          url: '',\n          templateUrl: '/static/components/home/home.tpl.html',\n          controller: 'HomeCtrl',\n        })\n        .state('dashboard', {\n          url: '/dashboard',\n          templateUrl: '/static/components/dashboard/dashboard.tpl.html',\n          controller: 'DashboardCtrl',\n        });\n\n      //theme here\n      $mdThemingProvider.definePalette('caloriousPalette',\n      {\n        50: 'F2F7FC',\n        100: 'CDDBEC',\n        200: 'A4BEDF',\n        300: '799DCD',\n        400: '5284C6',\n        500: '396FB4',\n        600: '3568AA',\n        700: '2D5FA0',\n        800: '225394',\n        900: '143F78',\n        A100: 'FCDB6F',\n        A200: 'FCCB24',\n        A400: 'F8B602',\n        A700: 'EFA10F',\n        contrastDefaultColor: 'light',    // whether, by default, text (contrast)\n        // on this palette should be dark or light\n\n        contrastDarkColors: ['50', '100', //hues which contrast should be 'dark' by default\n         '200', '300', '400', 'A100',],\n        contrastLightColors: undefined,    // could also specify this if default was 'dark'\n      });\n\n      $mdThemingProvider.theme('default')\n        .primaryPalette('caloriousPalette');\n    },\n]);\n","module.exports = function($scope) {\n    $scope.message = 'Dashboard works!? will firefox work?'\n}","'use strict';\n\nmodule.exports = angular.module('app.dashboard', [\n    require('../../shared/navbar').name,\n  ])\n  .controller('DashboardCtrl', ['$scope', require('./dashboard.ctrl')]);\n","'use strict';\n\nmodule.exports = function () {\n  return {\n    scope: {\n    },\n    restrict: 'A',\n    controller: function ($scope) {\n      \n    },\n\n    //controller: 'NavbarCtrl' //in case we need it\n    link: function (scope, elem, attrs) {\n      \n    },\n\n    templateUrl: '/static/components/home/calorious-login/calorious-login.tpl.html',\n  };\n};\n","module.exports = function ($scope) {\n    $scope.message = 'Home works!? will firefox work?';\n  };\n","'use strict';\n\nmodule.exports = angular.module('app.home', [\n    require('../../shared/navbar').name,\n  ])\n.directive('caloriousLogin', require('./calorious-login/calorious-login.directive'))\n.controller('HomeCtrl', ['$scope', require('./home.ctrl')]);\n","'use strict';\n\nmodule.exports = angular.module('sbApp.filters', [])\n.filter('capitalizeFirst', function() {\n\treturn function(input, scope) {\n\t\tif (input){\n\t    \tinput = input.toLowerCase();\n\t    \treturn input.substring(0,1).toUpperCase()+input.substring(1);\n\t\t}\n\t}\n})\n.filter('percentage', ['$filter', function ($filter) {\n  return function (input, decimals) {\n    return $filter('number')(input * 100, decimals) + '%';\n  };\n}])\n.filter('percentageParenthesis', ['$filter', function ($filter) {\n  return function (input, decimals) {\n  \tvar formatted = $filter('number')(Math.abs(input) * 100, decimals) + '%'\n  \tif (input < 0){\n  \t\tformatted = '(' + formatted + ')';\n  \t}\n    return  formatted;\n  };\n}])\n.filter('abbreviateCurrency', ['$filter', function ($filter) {\n\treturn function (input) {\n\t\tvar format = d3.format('.3s');\n\t\tvar value = format(input);\n\t\tvalue = value.replace('G', 'B');\n\t\treturn '$' + value;\n\t};\n}])\n.filter('percentageNA', ['$filter', function ($filter) {\n\treturn function (input, decimals) {\n\t\tif (input == 'N/A') {\n\t\t\treturn input;\n\t\t}\n\t\treturn $filter('number')(input * 100, decimals) + '%';\n\t};\n}])\n.filter('tableFilter', ['$filter', function ($filter) {\n\treturn function (input, type) {\n\t\tfunction abbreviateCurrency(value){\n\t\t\tvar format = d3.format('.3s');\n\t\t\treturn (function (v){\n\t\t\t\treturn v.replace('G', 'B');\n\t\t\t})(format(value));\n\t\t}\n\t\tif (type == 'currency'){\n\t\t\treturn '$' + abbreviateCurrency(input);\n\t\t}\n\t\telse if (type == 'percentage' && input != 'N/A'){\n\t\t\treturn $filter('number')(input * 100, 2) + '%';\n\t\t}\n\t\telse if (type == 'number'){\n\t\t\t// return $filter('number')(input, 0)\n\t\t\treturn abbreviateCurrency(input);\n\t\t}\n\t\treturn input;\n\t};\n}]);","'use strict';\n\nmodule.exports = angular.module('sbApp.navbar', [])\n\t.directive('navbar', require('./navbar.directive'));","'use strict';\n\nmodule.exports = function () {\n  return {\n    scope: {\n      title: '=',\n    },\n    restrict: 'A',\n\n    //controller: 'NavbarCtrl' //in case we need it\n    link: function (scope, elem, attrs) {\n    },\n\n    templateUrl: 'static/shared/navbar/navbar.tpl.html',\n  };\n};\n","/**\n * @license AngularJS v1.5.8\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\nvar bind;\nvar extend;\nvar forEach;\nvar isDefined;\nvar lowercase;\nvar noop;\nvar htmlParser;\nvar htmlSanitizeWriter;\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   Sanitizes an html string by stripping all potentially dangerous tokens.\n *\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string.\n *\n *   The whitelist for URL sanitization of attribute values is configured using the functions\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider\n *   `$compileProvider`}.\n *\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\n\n\n/**\n * @ngdoc provider\n * @name $sanitizeProvider\n *\n * @description\n * Creates and configures {@link $sanitize} instance.\n */\nfunction $SanitizeProvider() {\n  var svgEnabled = false;\n\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    if (svgEnabled) {\n      extend(validElements, svgElements);\n    }\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n\n\n  /**\n   * @ngdoc method\n   * @name $sanitizeProvider#enableSvg\n   * @kind function\n   *\n   * @description\n   * Enables a subset of svg to be supported by the sanitizer.\n   *\n   * <div class=\"alert alert-warning\">\n   *   <p>By enabling this setting without taking other precautions, you might expose your\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login\n   *   link). Such behavior can then result in phishing incidents.</p>\n   *\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\n   *   tags within the sanitized content:</p>\n   *\n   *   <br>\n   *\n   *   <pre><code>\n   *   .rootOfTheIncludedContent svg {\n   *     overflow: hidden !important;\n   *   }\n   *   </code></pre>\n   * </div>\n   *\n   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called\n   *    without an argument or self for chaining otherwise.\n   */\n  this.enableSvg = function(enableSvg) {\n    if (isDefined(enableSvg)) {\n      svgEnabled = enableSvg;\n      return this;\n    } else {\n      return svgEnabled;\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Private stuff\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  bind = angular.bind;\n  extend = angular.extend;\n  forEach = angular.forEach;\n  isDefined = angular.isDefined;\n  lowercase = angular.lowercase;\n  noop = angular.noop;\n\n  htmlParser = htmlParserImpl;\n  htmlSanitizeWriter = htmlSanitizeWriterImpl;\n\n  // Regular Expressions for parsing tags and attributes\n  var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n    // Match everything outside of normal chars and \" (quote character)\n    NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n\n  // Good source of info about elements and attributes\n  // http://dev.w3.org/html5/spec/Overview.html#semantics\n  // http://simon.html5.org/html-elements\n\n  // Safe Void Elements - HTML5\n  // http://dev.w3.org/html5/spec/Overview.html#void-elements\n  var voidElements = toMap(\"area,br,col,hr,img,wbr\");\n\n  // Elements that you can, intentionally, leave open (and which close themselves)\n  // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n  var optionalEndTagBlockElements = toMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n      optionalEndTagInlineElements = toMap(\"rp,rt\"),\n      optionalEndTagElements = extend({},\n                                              optionalEndTagInlineElements,\n                                              optionalEndTagBlockElements);\n\n  // Safe Block Elements - HTML5\n  var blockElements = extend({}, optionalEndTagBlockElements, toMap(\"address,article,\" +\n          \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n          \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul\"));\n\n  // Inline Elements - HTML5\n  var inlineElements = extend({}, optionalEndTagInlineElements, toMap(\"a,abbr,acronym,b,\" +\n          \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n          \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n  // SVG Elements\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n  // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n  // They can potentially allow for arbitrary javascript to be executed. See #11290\n  var svgElements = toMap(\"circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,\" +\n          \"hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,\" +\n          \"radialGradient,rect,stop,svg,switch,text,title,tspan\");\n\n  // Blocked Elements (will be stripped)\n  var blockedElements = toMap(\"script,style\");\n\n  var validElements = extend({},\n                                     voidElements,\n                                     blockElements,\n                                     inlineElements,\n                                     optionalEndTagElements);\n\n  //Attributes that have href and hence need to be sanitized\n  var uriAttrs = toMap(\"background,cite,href,longdesc,src,xlink:href\");\n\n  var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n      'valign,value,vspace,width');\n\n  // SVG attributes (without \"id\" and \"name\" attributes)\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\n  var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\n  var validAttrs = extend({},\n                                  uriAttrs,\n                                  svgAttrs,\n                                  htmlAttrs);\n\n  function toMap(str, lowercaseKeys) {\n    var obj = {}, items = str.split(','), i;\n    for (i = 0; i < items.length; i++) {\n      obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;\n    }\n    return obj;\n  }\n\n  var inertBodyElement;\n  (function(window) {\n    var doc;\n    if (window.document && window.document.implementation) {\n      doc = window.document.implementation.createHTMLDocument(\"inert\");\n    } else {\n      throw $sanitizeMinErr('noinert', \"Can't create an inert html document\");\n    }\n    var docElement = doc.documentElement || doc.getDocumentElement();\n    var bodyElements = docElement.getElementsByTagName('body');\n\n    // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one\n    if (bodyElements.length === 1) {\n      inertBodyElement = bodyElements[0];\n    } else {\n      var html = doc.createElement('html');\n      inertBodyElement = doc.createElement('body');\n      html.appendChild(inertBodyElement);\n      doc.appendChild(html);\n    }\n  })(window);\n\n  /**\n   * @example\n   * htmlParser(htmlString, {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * });\n   *\n   * @param {string} html string\n   * @param {object} handler\n   */\n  function htmlParserImpl(html, handler) {\n    if (html === null || html === undefined) {\n      html = '';\n    } else if (typeof html !== 'string') {\n      html = '' + html;\n    }\n    inertBodyElement.innerHTML = html;\n\n    //mXSS protection\n    var mXSSAttempts = 5;\n    do {\n      if (mXSSAttempts === 0) {\n        throw $sanitizeMinErr('uinput', \"Failed to sanitize html because the input is unstable\");\n      }\n      mXSSAttempts--;\n\n      // strip custom-namespaced attributes on IE<=11\n      if (window.document.documentMode) {\n        stripCustomNsAttrs(inertBodyElement);\n      }\n      html = inertBodyElement.innerHTML; //trigger mXSS\n      inertBodyElement.innerHTML = html;\n    } while (html !== inertBodyElement.innerHTML);\n\n    var node = inertBodyElement.firstChild;\n    while (node) {\n      switch (node.nodeType) {\n        case 1: // ELEMENT_NODE\n          handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\n          break;\n        case 3: // TEXT NODE\n          handler.chars(node.textContent);\n          break;\n      }\n\n      var nextNode;\n      if (!(nextNode = node.firstChild)) {\n      if (node.nodeType == 1) {\n          handler.end(node.nodeName.toLowerCase());\n        }\n        nextNode = node.nextSibling;\n        if (!nextNode) {\n          while (nextNode == null) {\n            node = node.parentNode;\n            if (node === inertBodyElement) break;\n            nextNode = node.nextSibling;\n          if (node.nodeType == 1) {\n              handler.end(node.nodeName.toLowerCase());\n            }\n          }\n        }\n      }\n      node = nextNode;\n    }\n\n    while (node = inertBodyElement.firstChild) {\n      inertBodyElement.removeChild(node);\n    }\n  }\n\n  function attrToMap(attrs) {\n    var map = {};\n    for (var i = 0, ii = attrs.length; i < ii; i++) {\n      var attr = attrs[i];\n      map[attr.name] = attr.value;\n    }\n    return map;\n  }\n\n\n  /**\n   * Escapes all potentially dangerous characters, so that the\n   * resulting string can be safely inserted into attribute or\n   * element text.\n   * @param value\n   * @returns {string} escaped text\n   */\n  function encodeEntities(value) {\n    return value.\n      replace(/&/g, '&amp;').\n      replace(SURROGATE_PAIR_REGEXP, function(value) {\n        var hi = value.charCodeAt(0);\n        var low = value.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n      }).\n      replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n        return '&#' + value.charCodeAt(0) + ';';\n      }).\n      replace(/</g, '&lt;').\n      replace(/>/g, '&gt;');\n  }\n\n  /**\n   * create an HTML/XML writer which writes to buffer\n   * @param {Array} buf use buf.join('') to get out sanitized html string\n   * @returns {object} in the form of {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * }\n   */\n  function htmlSanitizeWriterImpl(buf, uriValidator) {\n    var ignoreCurrentElement = false;\n    var out = bind(buf, buf.push);\n    return {\n      start: function(tag, attrs) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && blockedElements[tag]) {\n          ignoreCurrentElement = tag;\n        }\n        if (!ignoreCurrentElement && validElements[tag] === true) {\n          out('<');\n          out(tag);\n          forEach(attrs, function(value, key) {\n            var lkey = lowercase(key);\n            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n            if (validAttrs[lkey] === true &&\n              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n              out(' ');\n              out(key);\n              out('=\"');\n              out(encodeEntities(value));\n              out('\"');\n            }\n          });\n          out('>');\n        }\n      },\n      end: function(tag) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        if (tag == ignoreCurrentElement) {\n          ignoreCurrentElement = false;\n        }\n      },\n      chars: function(chars) {\n        if (!ignoreCurrentElement) {\n          out(encodeEntities(chars));\n        }\n      }\n    };\n  }\n\n\n  /**\n   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\n   * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n   * to allow any of these custom attributes. This method strips them all.\n   *\n   * @param node Root element to process\n   */\n  function stripCustomNsAttrs(node) {\n    if (node.nodeType === window.Node.ELEMENT_NODE) {\n      var attrs = node.attributes;\n      for (var i = 0, l = attrs.length; i < l; i++) {\n        var attrNode = attrs[i];\n        var attrName = attrNode.name.toLowerCase();\n        if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {\n          node.removeAttributeNode(attrNode);\n          i--;\n          l--;\n        }\n      }\n    }\n\n    var nextNode = node.firstChild;\n    if (nextNode) {\n      stripCustomNsAttrs(nextNode);\n    }\n\n    nextNode = node.nextSibling;\n    if (nextNode) {\n      stripCustomNsAttrs(nextNode);\n    }\n  }\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.\n *\n *    Can be one of:\n *\n *    - `object`: A map of attributes\n *    - `function`: Takes the url as a parameter and returns a map of attributes\n *\n *    If the map of attributes contains a value for `target`, it overrides the value of\n *    the target parameter.\n *\n *\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <th>Filter</th>\n           <th>Source</th>\n           <th>Rendered</th>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"linky-custom-attributes\">\n          <td>linky custom attributes</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"script.js\">\n       angular.module('linkyExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.snippet =\n             'Pretty text with some links:\\n'+\n             'http://angularjs.org/,\\n'+\n             'mailto:us@somewhere.org,\\n'+\n             'another@somewhere.org,\\n'+\n             'and one more: ftp://127.0.0.1/.';\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';\n         }]);\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n\n       it('should optionally add custom attributes', function() {\n        expect(element(by.id('linky-custom-attributes')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  var linkyMinErr = angular.$$minErr('linky');\n  var isDefined = angular.isDefined;\n  var isFunction = angular.isFunction;\n  var isObject = angular.isObject;\n  var isString = angular.isString;\n\n  return function(text, target, attributes) {\n    if (text == null || text === '') return text;\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\n\n    var attributesFn =\n      isFunction(attributes) ? attributes :\n      isObject(attributes) ? function getAttributesObject() {return attributes;} :\n      function getEmptyAttributesObject() {return {};};\n\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      var key, linkAttributes = attributesFn(url);\n      html.push('<a ');\n\n      for (key in linkAttributes) {\n        html.push(key + '=\"' + linkAttributes[key] + '\" ');\n      }\n\n      if (isDefined(target) && !('target' in linkAttributes)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n","require('./angular-sanitize');\nmodule.exports = 'ngSanitize';\n","/**\n * State-based routing for AngularJS\n * @version v0.3.1\n * @link http://angular-ui.github.com/\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'ui.router';\n}\n\n(function (window, angular, undefined) {\n/*jshint globalstrict:true*/\n/*global angular:false*/\n'use strict';\n\nvar isDefined = angular.isDefined,\n    isFunction = angular.isFunction,\n    isString = angular.isString,\n    isObject = angular.isObject,\n    isArray = angular.isArray,\n    forEach = angular.forEach,\n    extend = angular.extend,\n    copy = angular.copy,\n    toJson = angular.toJson;\n\nfunction inherit(parent, extra) {\n  return extend(new (extend(function() {}, { prototype: parent }))(), extra);\n}\n\nfunction merge(dst) {\n  forEach(arguments, function(obj) {\n    if (obj !== dst) {\n      forEach(obj, function(value, key) {\n        if (!dst.hasOwnProperty(key)) dst[key] = value;\n      });\n    }\n  });\n  return dst;\n}\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nfunction ancestors(first, second) {\n  var path = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * IE8-safe wrapper for `Object.keys()`.\n *\n * @param {Object} object A JavaScript object.\n * @return {Array} Returns the keys of the object as an array.\n */\nfunction objectKeys(object) {\n  if (Object.keys) {\n    return Object.keys(object);\n  }\n  var result = [];\n\n  forEach(object, function(val, key) {\n    result.push(key);\n  });\n  return result;\n}\n\n/**\n * IE8-safe wrapper for `Array.prototype.indexOf()`.\n *\n * @param {Array} array A JavaScript array.\n * @param {*} value A value to search the array for.\n * @return {Number} Returns the array index value of `value`, or `-1` if not present.\n */\nfunction indexOf(array, value) {\n  if (Array.prototype.indexOf) {\n    return array.indexOf(value, Number(arguments[2]) || 0);\n  }\n  var len = array.length >>> 0, from = Number(arguments[2]) || 0;\n  from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n\n  if (from < 0) from += len;\n\n  for (; from < len; from++) {\n    if (from in array && array[from] === value) return from;\n  }\n  return -1;\n}\n\n/**\n * Merges a set of parameters with all parameters inherited between the common parents of the\n * current state and a given destination state.\n *\n * @param {Object} currentParams The value of the current state parameters ($stateParams).\n * @param {Object} newParams The set of parameters which will be composited with inherited params.\n * @param {Object} $current Internal definition of object representing the current state.\n * @param {Object} $to Internal definition of object representing state to transition to.\n */\nfunction inheritParams(currentParams, newParams, $current, $to) {\n  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\n  for (var i in parents) {\n    if (!parents[i] || !parents[i].params) continue;\n    parentParams = objectKeys(parents[i].params);\n    if (!parentParams.length) continue;\n\n    for (var j in parentParams) {\n      if (indexOf(inheritList, parentParams[j]) >= 0) continue;\n      inheritList.push(parentParams[j]);\n      inherited[parentParams[j]] = currentParams[parentParams[j]];\n    }\n  }\n  return extend({}, inherited, newParams);\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nfunction equalForKeys(a, b, keys) {\n  if (!keys) {\n    keys = [];\n    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility\n  }\n\n  for (var i=0; i<keys.length; i++) {\n    var k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\n/**\n * Returns the subset of an object, based on a list of keys.\n *\n * @param {Array} keys\n * @param {Object} values\n * @return {Boolean} Returns a subset of `values`.\n */\nfunction filterByKeys(keys, values) {\n  var filtered = {};\n\n  forEach(keys, function (name) {\n    filtered[name] = values[name];\n  });\n  return filtered;\n}\n\n// like _.indexBy\n// when you know that your index values will be unique, or you want last-one-in to win\nfunction indexBy(array, propName) {\n  var result = {};\n  forEach(array, function(item) {\n    result[item[propName]] = item;\n  });\n  return result;\n}\n\n// extracted from underscore.js\n// Return a copy of the object only containing the whitelisted properties.\nfunction pick(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  forEach(keys, function(key) {\n    if (key in obj) copy[key] = obj[key];\n  });\n  return copy;\n}\n\n// extracted from underscore.js\n// Return a copy of the object omitting the blacklisted properties.\nfunction omit(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  for (var key in obj) {\n    if (indexOf(keys, key) == -1) copy[key] = obj[key];\n  }\n  return copy;\n}\n\nfunction pluck(collection, key) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = isFunction(key) ? key(val) : val[key];\n  });\n  return result;\n}\n\nfunction filter(collection, callback) {\n  var array = isArray(collection);\n  var result = array ? [] : {};\n  forEach(collection, function(val, i) {\n    if (callback(val, i)) {\n      result[array ? result.length : i] = val;\n    }\n  });\n  return result;\n}\n\nfunction map(collection, callback) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = callback(val, i);\n  });\n  return result;\n}\n\n/**\n * @ngdoc overview\n * @name ui.router.util\n *\n * @description\n * # ui.router.util sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.util', ['ng']);\n\n/**\n * @ngdoc overview\n * @name ui.router.router\n * \n * @requires ui.router.util\n *\n * @description\n * # ui.router.router sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n */\nangular.module('ui.router.router', ['ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router.state\n * \n * @requires ui.router.router\n * @requires ui.router.util\n *\n * @description\n * # ui.router.state sub-module\n *\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n * \n */\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router\n *\n * @requires ui.router.state\n *\n * @description\n * # ui.router\n * \n * ## The main module for ui.router \n * There are several sub-modules included with the ui.router module, however only this module is needed\n * as a dependency within your angular app. The other modules are for organization purposes. \n *\n * The modules are:\n * * ui.router - the main \"umbrella\" module\n * * ui.router.router - \n * \n * *You'll need to include **only** this module as the dependency within your angular app.*\n * \n * <pre>\n * <!doctype html>\n * <html ng-app=\"myApp\">\n * <head>\n *   <script src=\"js/angular.js\"></script>\n *   <!-- Include the ui-router script -->\n *   <script src=\"js/angular-ui-router.min.js\"></script>\n *   <script>\n *     // ...and add 'ui.router' as a dependency\n *     var myApp = angular.module('myApp', ['ui.router']);\n *   </script>\n * </head>\n * <body>\n * </body>\n * </html>\n * </pre>\n */\nangular.module('ui.router', ['ui.router.state']);\n\nangular.module('ui.router.compat', ['ui.router']);\n\n/**\n * @ngdoc object\n * @name ui.router.util.$resolve\n *\n * @requires $q\n * @requires $injector\n *\n * @description\n * Manages resolution of (acyclic) graphs of promises.\n */\n$Resolve.$inject = ['$q', '$injector'];\nfunction $Resolve(  $q,    $injector) {\n  \n  var VISIT_IN_PROGRESS = 1,\n      VISIT_DONE = 2,\n      NOTHING = {},\n      NO_DEPENDENCIES = [],\n      NO_LOCALS = NOTHING,\n      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });\n  \n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#study\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Studies a set of invocables that are likely to be used multiple times.\n   * <pre>\n   * $resolve.study(invocables)(locals, parent, self)\n   * </pre>\n   * is equivalent to\n   * <pre>\n   * $resolve.resolve(invocables, locals, parent, self)\n   * </pre>\n   * but the former is more efficient (in fact `resolve` just calls `study` \n   * internally).\n   *\n   * @param {object} invocables Invocable objects\n   * @return {function} a function to pass in locals, parent and self\n   */\n  this.study = function (invocables) {\n    if (!isObject(invocables)) throw new Error(\"'invocables' must be an object\");\n    var invocableKeys = objectKeys(invocables || {});\n    \n    // Perform a topological sort of invocables to build an ordered plan\n    var plan = [], cycle = [], visited = {};\n    function visit(value, key) {\n      if (visited[key] === VISIT_DONE) return;\n      \n      cycle.push(key);\n      if (visited[key] === VISIT_IN_PROGRESS) {\n        cycle.splice(0, indexOf(cycle, key));\n        throw new Error(\"Cyclic dependency: \" + cycle.join(\" -> \"));\n      }\n      visited[key] = VISIT_IN_PROGRESS;\n      \n      if (isString(value)) {\n        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);\n      } else {\n        var params = $injector.annotate(value);\n        forEach(params, function (param) {\n          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);\n        });\n        plan.push(key, value, params);\n      }\n      \n      cycle.pop();\n      visited[key] = VISIT_DONE;\n    }\n    forEach(invocables, visit);\n    invocables = cycle = visited = null; // plan is all that's required\n    \n    function isResolve(value) {\n      return isObject(value) && value.then && value.$$promises;\n    }\n    \n    return function (locals, parent, self) {\n      if (isResolve(locals) && self === undefined) {\n        self = parent; parent = locals; locals = null;\n      }\n      if (!locals) locals = NO_LOCALS;\n      else if (!isObject(locals)) {\n        throw new Error(\"'locals' must be an object\");\n      }       \n      if (!parent) parent = NO_PARENT;\n      else if (!isResolve(parent)) {\n        throw new Error(\"'parent' must be a promise returned by $resolve.resolve()\");\n      }\n      \n      // To complete the overall resolution, we have to wait for the parent\n      // promise and for the promise for each invokable in our plan.\n      var resolution = $q.defer(),\n          result = resolution.promise,\n          promises = result.$$promises = {},\n          values = extend({}, locals),\n          wait = 1 + plan.length/3,\n          merged = false;\n          \n      function done() {\n        // Merge parent values we haven't got yet and publish our own $$values\n        if (!--wait) {\n          if (!merged) merge(values, parent.$$values); \n          result.$$values = values;\n          result.$$promises = result.$$promises || true; // keep for isResolve()\n          delete result.$$inheritedValues;\n          resolution.resolve(values);\n        }\n      }\n      \n      function fail(reason) {\n        result.$$failure = reason;\n        resolution.reject(reason);\n      }\n\n      // Short-circuit if parent has already failed\n      if (isDefined(parent.$$failure)) {\n        fail(parent.$$failure);\n        return result;\n      }\n      \n      if (parent.$$inheritedValues) {\n        merge(values, omit(parent.$$inheritedValues, invocableKeys));\n      }\n\n      // Merge parent values if the parent has already resolved, or merge\n      // parent promises and wait if the parent resolve is still in progress.\n      extend(promises, parent.$$promises);\n      if (parent.$$values) {\n        merged = merge(values, omit(parent.$$values, invocableKeys));\n        result.$$inheritedValues = omit(parent.$$values, invocableKeys);\n        done();\n      } else {\n        if (parent.$$inheritedValues) {\n          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);\n        }        \n        parent.then(done, fail);\n      }\n      \n      // Process each invocable in the plan, but ignore any where a local of the same name exists.\n      for (var i=0, ii=plan.length; i<ii; i+=3) {\n        if (locals.hasOwnProperty(plan[i])) done();\n        else invoke(plan[i], plan[i+1], plan[i+2]);\n      }\n      \n      function invoke(key, invocable, params) {\n        // Create a deferred for this invocation. Failures will propagate to the resolution as well.\n        var invocation = $q.defer(), waitParams = 0;\n        function onfailure(reason) {\n          invocation.reject(reason);\n          fail(reason);\n        }\n        // Wait for any parameter that we have a promise for (either from parent or from this\n        // resolve; in that case study() will have made sure it's ordered before us in the plan).\n        forEach(params, function (dep) {\n          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {\n            waitParams++;\n            promises[dep].then(function (result) {\n              values[dep] = result;\n              if (!(--waitParams)) proceed();\n            }, onfailure);\n          }\n        });\n        if (!waitParams) proceed();\n        function proceed() {\n          if (isDefined(result.$$failure)) return;\n          try {\n            invocation.resolve($injector.invoke(invocable, self, values));\n            invocation.promise.then(function (result) {\n              values[key] = result;\n              done();\n            }, onfailure);\n          } catch (e) {\n            onfailure(e);\n          }\n        }\n        // Publish promise synchronously; invocations further down in the plan may depend on it.\n        promises[key] = invocation.promise;\n      }\n      \n      return result;\n    };\n  };\n  \n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#resolve\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Resolves a set of invocables. An invocable is a function to be invoked via \n   * `$injector.invoke()`, and can have an arbitrary number of dependencies. \n   * An invocable can either return a value directly,\n   * or a `$q` promise. If a promise is returned it will be resolved and the \n   * resulting value will be used instead. Dependencies of invocables are resolved \n   * (in this order of precedence)\n   *\n   * - from the specified `locals`\n   * - from another invocable that is part of this `$resolve` call\n   * - from an invocable that is inherited from a `parent` call to `$resolve` \n   *   (or recursively\n   * - from any ancestor `$resolve` of that parent).\n   *\n   * The return value of `$resolve` is a promise for an object that contains \n   * (in this order of precedence)\n   *\n   * - any `locals` (if specified)\n   * - the resolved return values of all injectables\n   * - any values inherited from a `parent` call to `$resolve` (if specified)\n   *\n   * The promise will resolve after the `parent` promise (if any) and all promises \n   * returned by injectables have been resolved. If any invocable \n   * (or `$injector.invoke`) throws an exception, or if a promise returned by an \n   * invocable is rejected, the `$resolve` promise is immediately rejected with the \n   * same error. A rejection of a `parent` promise (if specified) will likewise be \n   * propagated immediately. Once the `$resolve` promise has been rejected, no \n   * further invocables will be called.\n   * \n   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`\n   * to throw an error. As a special case, an injectable can depend on a parameter \n   * with the same name as the injectable, which will be fulfilled from the `parent` \n   * injectable of the same name. This allows inherited values to be decorated. \n   * Note that in this case any other injectable in the same `$resolve` with the same\n   * dependency would see the decorated value, not the inherited value.\n   *\n   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an \n   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) \n   * exception.\n   *\n   * Invocables are invoked eagerly as soon as all dependencies are available. \n   * This is true even for dependencies inherited from a `parent` call to `$resolve`.\n   *\n   * As a special case, an invocable can be a string, in which case it is taken to \n   * be a service name to be passed to `$injector.get()`. This is supported primarily \n   * for backwards-compatibility with the `resolve` property of `$routeProvider` \n   * routes.\n   *\n   * @param {object} invocables functions to invoke or \n   * `$injector` services to fetch.\n   * @param {object} locals  values to make available to the injectables\n   * @param {object} parent  a promise returned by another call to `$resolve`.\n   * @param {object} self  the `this` for the invoked methods\n   * @return {object} Promise for an object that contains the resolved return value\n   * of all invocables, as well as any inherited and local values.\n   */\n  this.resolve = function (invocables, locals, parent, self) {\n    return this.study(invocables)(locals, parent, self);\n  };\n}\n\nangular.module('ui.router.util').service('$resolve', $Resolve);\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$templateFactory\n *\n * @requires $http\n * @requires $templateCache\n * @requires $injector\n *\n * @description\n * Service. Manages loading of templates.\n */\n$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];\nfunction $TemplateFactory(  $http,   $templateCache,   $injector) {\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromConfig\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a configuration object. \n   *\n   * @param {object} config Configuration object for which to load a template. \n   * The following properties are search in the specified order, and the first one \n   * that is defined is used to create the template:\n   *\n   * @param {string|object} config.template html string template or function to \n   * load via {@link ui.router.util.$templateFactory#fromString fromString}.\n   * @param {string|object} config.templateUrl url to load or a function returning \n   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.\n   * @param {Function} config.templateProvider function to invoke via \n   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.\n   * @param {object} params  Parameters to pass to the template function.\n   * @param {object} locals Locals to pass to `invoke` if the template is loaded \n   * via a `templateProvider`. Defaults to `{ params: params }`.\n   *\n   * @return {string|object}  The template html as a string, or a promise for \n   * that string,or `null` if no template is configured.\n   */\n  this.fromConfig = function (config, params, locals) {\n    return (\n      isDefined(config.template) ? this.fromString(config.template, params) :\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :\n      null\n    );\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromString\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a string or a function returning a string.\n   *\n   * @param {string|object} template html template as a string or function that \n   * returns an html template as a string.\n   * @param {object} params Parameters to pass to the template function.\n   *\n   * @return {string|object} The template html as a string, or a promise for that \n   * string.\n   */\n  this.fromString = function (template, params) {\n    return isFunction(template) ? template(params) : template;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromUrl\n   * @methodOf ui.router.util.$templateFactory\n   * \n   * @description\n   * Loads a template from the a URL via `$http` and `$templateCache`.\n   *\n   * @param {string|Function} url url of the template to load, or a function \n   * that returns a url.\n   * @param {Object} params Parameters to pass to the url function.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromUrl = function (url, params) {\n    if (isFunction(url)) url = url(params);\n    if (url == null) return null;\n    else return $http\n        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})\n        .then(function(response) { return response.data; });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromProvider\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template by invoking an injectable provider function.\n   *\n   * @param {Function} provider Function to invoke via `$injector.invoke`\n   * @param {Object} params Parameters for the template.\n   * @param {Object} locals Locals to pass to `invoke`. Defaults to \n   * `{ params: params }`.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromProvider = function (provider, params, locals) {\n    return $injector.invoke(provider, null, locals || { params: params });\n  };\n}\n\nangular.module('ui.router.util').service('$templateFactory', $TemplateFactory);\n\nvar $$UMFP; // reference to $UrlMatcherFactoryProvider\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:UrlMatcher\n *\n * @description\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list\n * of search parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.\n *\n * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace\n * syntax, which optionally allows a regular expression for the parameter to be specified:\n *\n * * `':'` name - colon placeholder\n * * `'*'` name - catch-all placeholder\n * * `'{' name '}'` - curly placeholder\n * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the\n *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters). For colon\n * placeholders or curly placeholders without an explicit regexp, a path parameter matches any\n * number of characters other than '/'. For catch-all placeholders the path parameter matches\n * any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n * @param {string} pattern  The pattern to compile into a matcher.\n * @param {Object} config  A configuration object hash:\n * @param {Object=} parentMatcher Used to concatenate the pattern/config onto\n *   an existing UrlMatcher\n *\n * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n *\n * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any\n *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n *   non-null) will start with this prefix.\n *\n * @property {string} source  The pattern that was passed into the constructor\n *\n * @property {string} sourcePath  The path portion of the source property\n *\n * @property {string} sourceSearch  The search portion of the source property\n *\n * @property {string} regex  The constructed regex that will be used to match against the url when\n *   it is time to determine which url will match.\n *\n * @returns {Object}  New `UrlMatcher` object\n */\nfunction UrlMatcher(pattern, config, parentMatcher) {\n  config = extend({ params: {} }, isObject(config) ? config : {});\n\n  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n  //   '*' name\n  //   ':' name\n  //   '{' name '}'\n  //   '{' name ':' regexp '}'\n  // The regular expression is somewhat complicated due to the need to allow curly braces\n  // inside the regular expression. The placeholder regexp breaks down as follows:\n  //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n  //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n  //    [^{}\\\\]+                       - anything other than curly braces or backslash\n  //    \\\\.                            - a backslash escape\n  //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n  var placeholder       = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      compiled = '^', last = 0, m,\n      segments = this.segments = [],\n      parentParams = parentMatcher ? parentMatcher.params : {},\n      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),\n      paramNames = [];\n\n  function addParameter(id, type, config, location) {\n    paramNames.push(id);\n    if (parentParams[id]) return parentParams[id];\n    if (!/^\\w+([-.]+\\w+)*(?:\\[\\])?$/.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    if (params[id]) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    params[id] = new $$UMFP.Param(id, type, config, location);\n    return params[id];\n  }\n\n  function quoteRegExp(string, pattern, squash, optional) {\n    var surroundPattern = ['',''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!pattern) return result;\n    switch(squash) {\n      case false: surroundPattern = ['(', ')' + (optional ? \"?\" : \"\")]; break;\n      case true:\n        result = result.replace(/\\/$/, '');\n        surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n      default:    surroundPattern = ['(' + squash + \"|\", ')?']; break;\n    }\n    return result + surroundPattern[0] + pattern + surroundPattern[1];\n  }\n\n  this.source = pattern;\n\n  // Split into static segments separated by path parameter placeholders.\n  // The number of segments is always 1 more than the number of parameters.\n  function matchDetails(m, isSearch) {\n    var id, regexp, segment, type, cfg, arrayMode;\n    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null\n    cfg         = config.params[id];\n    segment     = pattern.substring(last, m.index);\n    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);\n\n    if (regexp) {\n      type      = $$UMFP.type(regexp) || inherit($$UMFP.type(\"string\"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });\n    }\n\n    return {\n      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg\n    };\n  }\n\n  var p, param, segment;\n  while ((m = placeholder.exec(pattern))) {\n    p = matchDetails(m, false);\n    if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n    param = addParameter(p.id, p.type, p.cfg, \"path\");\n    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);\n    segments.push(p.segment);\n    last = placeholder.lastIndex;\n  }\n  segment = pattern.substring(last);\n\n  // Find any search parameter names and remove them from the last segment\n  var i = segment.indexOf('?');\n\n  if (i >= 0) {\n    var search = this.sourceSearch = segment.substring(i);\n    segment = segment.substring(0, i);\n    this.sourcePath = pattern.substring(0, last + i);\n\n    if (search.length > 0) {\n      last = 0;\n      while ((m = searchPlaceholder.exec(search))) {\n        p = matchDetails(m, true);\n        param = addParameter(p.id, p.type, p.cfg, \"search\");\n        last = placeholder.lastIndex;\n        // check if ?&\n      }\n    }\n  } else {\n    this.sourcePath = pattern;\n    this.sourceSearch = '';\n  }\n\n  compiled += quoteRegExp(segment) + (config.strict === false ? '\\/?' : '') + '$';\n  segments.push(segment);\n\n  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);\n  this.prefix = segments[0];\n  this.$$paramNames = paramNames;\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#concat\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns a new matcher for a pattern constructed by appending the path part and adding the\n * search parameters of the specified pattern to this pattern. The current pattern is not\n * modified. This can be understood as creating a pattern for URLs that are relative to (or\n * suffixes of) the current pattern.\n *\n * @example\n * The following two matchers are equivalent:\n * <pre>\n * new UrlMatcher('/user/{id}?q').concat('/details?date');\n * new UrlMatcher('/user/{id}/details?q&date');\n * </pre>\n *\n * @param {string} pattern  The pattern to append.\n * @param {Object} config  An object hash of the configuration for the matcher.\n * @returns {UrlMatcher}  A matcher for the concatenated pattern.\n */\nUrlMatcher.prototype.concat = function (pattern, config) {\n  // Because order of search parameters is irrelevant, we can add our own search\n  // parameters to the end of the new pattern. Parse the new pattern by itself\n  // and then join the bits together, but it's much easier to do this on a string level.\n  var defaultConfig = {\n    caseInsensitive: $$UMFP.caseInsensitive(),\n    strict: $$UMFP.strictMode(),\n    squash: $$UMFP.defaultSquashPolicy()\n  };\n  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);\n};\n\nUrlMatcher.prototype.toString = function () {\n  return this.source;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#exec\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Tests the specified path against this matcher, and returns an object containing the captured\n * parameter values, or null if the path does not match. The returned object contains the values\n * of any search parameters that are mentioned in the pattern, but their value may be null if\n * they are not present in `searchParams`. This means that search parameters are always treated\n * as optional.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n *   x: '1', q: 'hello'\n * });\n * // returns { id: 'bob', q: 'hello', r: null }\n * </pre>\n *\n * @param {string} path  The URL path to match, e.g. `$location.path()`.\n * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.\n * @returns {Object}  The captured parameter values.\n */\nUrlMatcher.prototype.exec = function (path, searchParams) {\n  var m = this.regexp.exec(path);\n  if (!m) return null;\n  searchParams = searchParams || {};\n\n  var paramNames = this.parameters(), nTotal = paramNames.length,\n    nPath = this.segments.length - 1,\n    values = {}, i, j, cfg, paramName;\n\n  if (nPath !== m.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.source + \"'\");\n\n  function decodePathArray(string) {\n    function reverseString(str) { return str.split(\"\").reverse().join(\"\"); }\n    function unquoteDashes(str) { return str.replace(/\\\\-/g, \"-\"); }\n\n    var split = reverseString(string).split(/-(?!\\\\)/);\n    var allReversed = map(split, reverseString);\n    return map(allReversed, unquoteDashes).reverse();\n  }\n\n  var param, paramVal;\n  for (i = 0; i < nPath; i++) {\n    paramName = paramNames[i];\n    param = this.params[paramName];\n    paramVal = m[i+1];\n    // if the param value matches a pre-replace pair, replace the value before decoding.\n    for (j = 0; j < param.replace.length; j++) {\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n    }\n    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);\n    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n    values[paramName] = param.value(paramVal);\n  }\n  for (/**/; i < nTotal; i++) {\n    paramName = paramNames[i];\n    values[paramName] = this.params[paramName].value(searchParams[paramName]);\n    param = this.params[paramName];\n    paramVal = searchParams[paramName];\n    for (j = 0; j < param.replace.length; j++) {\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n    }\n    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n    values[paramName] = param.value(paramVal);\n  }\n\n  return values;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#parameters\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns the names of all path and search parameters of this pattern in an unspecified order.\n *\n * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the\n *    pattern has no parameters, an empty array is returned.\n */\nUrlMatcher.prototype.parameters = function (param) {\n  if (!isDefined(param)) return this.$$paramNames;\n  return this.params[param] || null;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#validates\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Checks an object hash of parameters to validate their correctness according to the parameter\n * types of this `UrlMatcher`.\n *\n * @param {Object} params The object hash of parameters to validate.\n * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.\n */\nUrlMatcher.prototype.validates = function (params) {\n  return this.params.$$validates(params);\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#format\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Creates a URL that matches this pattern by substituting the specified values\n * for the path and search parameters. Null values for path parameters are\n * treated as empty strings.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n * // returns '/user/bob?q=yes'\n * </pre>\n *\n * @param {Object} values  the values to substitute for the parameters in this pattern.\n * @returns {string}  the formatted URL (path and optionally search part).\n */\nUrlMatcher.prototype.format = function (values) {\n  values = values || {};\n  var segments = this.segments, params = this.parameters(), paramset = this.params;\n  if (!this.validates(values)) return null;\n\n  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];\n\n  function encodeDashes(str) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });\n  }\n\n  for (i = 0; i < nTotal; i++) {\n    var isPathParam = i < nPath;\n    var name = params[i], param = paramset[name], value = param.value(values[name]);\n    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);\n    var squash = isDefaultValue ? param.squash : false;\n    var encoded = param.type.encode(value);\n\n    if (isPathParam) {\n      var nextSegment = segments[i + 1];\n      var isFinalPathParam = i + 1 === nPath;\n\n      if (squash === false) {\n        if (encoded != null) {\n          if (isArray(encoded)) {\n            result += map(encoded, encodeDashes).join(\"-\");\n          } else {\n            result += encodeURIComponent(encoded);\n          }\n        }\n        result += nextSegment;\n      } else if (squash === true) {\n        var capture = result.match(/\\/$/) ? /\\/?(.*)/ : /(.*)/;\n        result += nextSegment.match(capture)[1];\n      } else if (isString(squash)) {\n        result += squash + nextSegment;\n      }\n\n      if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);\n    } else {\n      if (encoded == null || (isDefaultValue && squash !== false)) continue;\n      if (!isArray(encoded)) encoded = [ encoded ];\n      if (encoded.length === 0) continue;\n      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');\n      result += (search ? '&' : '?') + (name + '=' + encoded);\n      search = true;\n    }\n  }\n\n  return result;\n};\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:Type\n *\n * @description\n * Implements an interface to define custom parameter types that can be decoded from and encoded to\n * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}\n * objects when matching or formatting URLs, or comparing or validating parameter values.\n *\n * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more\n * information on registering custom types.\n *\n * @param {Object} config  A configuration object which contains the custom type definition.  The object's\n *        properties will override the default methods and/or pattern in `Type`'s public interface.\n * @example\n * <pre>\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * </pre>\n *\n * @property {RegExp} pattern The regular expression pattern used to match values of this type when\n *           coming from a substring of a URL.\n *\n * @returns {Object}  Returns a new `Type` object.\n */\nfunction Type(config) {\n  extend(this, config);\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#is\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Detects whether a value is of a particular type. Accepts a native (decoded) value\n * and determines whether it matches the current `Type` object.\n *\n * @param {*} val  The value to check.\n * @param {string} key  Optional. If the type check is happening in the context of a specific\n *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the\n *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.\n * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.\n */\nType.prototype.is = function(val, key) {\n  return true;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#encode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the\n * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it\n * only needs to be a representation of `val` that has been coerced to a string.\n *\n * @param {*} val  The value to encode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.\n */\nType.prototype.encode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#decode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Converts a parameter value (from URL string or transition param) to a custom/native value.\n *\n * @param {string} val  The URL parameter value to decode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {*}  Returns a custom representation of the URL parameter value.\n */\nType.prototype.decode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#equals\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Determines whether two decoded values are equivalent.\n *\n * @param {*} a  A value to compare against.\n * @param {*} b  A value to compare against.\n * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.\n */\nType.prototype.equals = function(a, b) {\n  return a == b;\n};\n\nType.prototype.$subPattern = function() {\n  var sub = this.pattern.toString();\n  return sub.substr(1, sub.length - 2);\n};\n\nType.prototype.pattern = /.*/;\n\nType.prototype.toString = function() { return \"{Type:\" + this.name + \"}\"; };\n\n/** Given an encoded string, or a decoded object, returns a decoded object */\nType.prototype.$normalize = function(val) {\n  return this.is(val) ? val : this.decode(val);\n};\n\n/*\n * Wraps an existing custom Type as an array of Type, depending on 'mode'.\n * e.g.:\n * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n * - url: \"/path?queryParam=1&queryParam=2\n * - $stateParams.queryParam will be [1, 2]\n * if `mode` is \"auto\", then\n * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n */\nType.prototype.$asArray = function(mode, isSearch) {\n  if (!mode) return this;\n  if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n\n  function ArrayType(type, mode) {\n    function bindTo(type, callbackName) {\n      return function() {\n        return type[callbackName].apply(type, arguments);\n      };\n    }\n\n    // Wrap non-array value as array\n    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n      switch(val.length) {\n        case 0: return undefined;\n        case 1: return mode === \"auto\" ? val[0] : val;\n        default: return val;\n      }\n    }\n    function falsey(val) { return !val; }\n\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n      return function handleArray(val) {\n        if (isArray(val) && val.length === 0) return val;\n        val = arrayWrap(val);\n        var result = map(val, callback);\n        if (allTruthyMode === true)\n          return filter(result, falsey).length === 0;\n        return arrayUnwrap(result);\n      };\n    }\n\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n      return function handleArray(val1, val2) {\n        var left = arrayWrap(val1), right = arrayWrap(val2);\n        if (left.length !== right.length) return false;\n        for (var i = 0; i < left.length; i++) {\n          if (!callback(left[i], right[i])) return false;\n        }\n        return true;\n      };\n    }\n\n    this.encode = arrayHandler(bindTo(type, 'encode'));\n    this.decode = arrayHandler(bindTo(type, 'decode'));\n    this.is     = arrayHandler(bindTo(type, 'is'), true);\n    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));\n    this.pattern = type.pattern;\n    this.$normalize = arrayHandler(bindTo(type, '$normalize'));\n    this.name = type.name;\n    this.$arrayMode = mode;\n  }\n\n  return new ArrayType(this, mode);\n};\n\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$urlMatcherFactory\n *\n * @description\n * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory\n * is also available to providers under the name `$urlMatcherFactoryProvider`.\n */\nfunction $UrlMatcherFactory() {\n  $$UMFP = this;\n\n  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;\n\n  // Use tildes to pre-encode slashes.\n  // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n  // and bidirectional encoding/decoding fails.\n  // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n  function valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\n  function valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\n  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.\n      // In 0.2.x, string params are optional by default for backwards compat\n      is: function(val) { return val == null || !isDefined(val) || typeof val === \"string\"; },\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode: function(val) { return parseInt(val, 10); },\n      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /\\d+/\n    },\n    \"bool\": {\n      encode: function(val) { return val ? 1 : 0; },\n      decode: function(val) { return parseInt(val, 10) !== 0; },\n      is: function(val) { return val === true || val === false; },\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode: function (val) {\n        if (!this.is(val))\n          return undefined;\n        return [ val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode: function (val) {\n        if (this.is(val)) return val;\n        var match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },\n      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: angular.toJson,\n      decode: angular.fromJson,\n      is: angular.isObject,\n      equals: angular.equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: angular.identity,\n      decode: angular.identity,\n      equals: angular.equals,\n      pattern: /.*/\n    }\n  };\n\n  function getDefaultConfig() {\n    return {\n      strict: isStrictMode,\n      caseInsensitive: isCaseInsensitive\n    };\n  }\n\n  function isInjectable(value) {\n    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));\n  }\n\n  /**\n   * [Internal] Get the default value of a parameter, which may be an injectable function.\n   */\n  $UrlMatcherFactory.$$getDefaultValue = function(config) {\n    if (!isInjectable(config.value)) return config.value;\n    if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n    return injector.invoke(config.value);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#caseInsensitive\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns {boolean} the current value of caseInsensitive\n   */\n  this.caseInsensitive = function(value) {\n    if (isDefined(value))\n      isCaseInsensitive = value;\n    return isCaseInsensitive;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#strictMode\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns {boolean} the current value of strictMode\n   */\n  this.strictMode = function(value) {\n    if (isDefined(value))\n      isStrictMode = value;\n    return isStrictMode;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param {string} value A string that defines the default parameter URL squashing behavior.\n   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   */\n  this.defaultSquashPolicy = function(value) {\n    if (!isDefined(value)) return defaultSquashPolicy;\n    if (value !== true && value !== false && !isString(value))\n      throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n    defaultSquashPolicy = value;\n    return value;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#compile\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.\n   *\n   * @param {string} pattern  The URL pattern.\n   * @param {Object} config  The config object hash.\n   * @returns {UrlMatcher}  The UrlMatcher.\n   */\n  this.compile = function (pattern, config) {\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#isMatcher\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.\n   *\n   * @param {Object} object  The object to perform the type check against.\n   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  this.isMatcher = function (o) {\n    if (!isObject(o)) return false;\n    var result = true;\n\n    forEach(UrlMatcher.prototype, function(val, name) {\n      if (isFunction(val)) {\n        result = result && (isDefined(o[name]) && isFunction(o[name]));\n      }\n    });\n    return result;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#type\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to\n   * generate URLs with typed parameters.\n   *\n   * @param {string} name  The type name.\n   * @param {Object|Function} definition   The type definition. See\n   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   * @param {Object|Function} definitionFn (optional) A function that is injected before the app\n   *        runtime starts.  The result of this function is merged into the existing `definition`.\n   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   *\n   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.\n   *\n   * @example\n   * This is a simple example of a custom type that encodes and decodes items from an\n   * array, using the array index as the URL-encoded value:\n   *\n   * <pre>\n   * var list = ['John', 'Paul', 'George', 'Ringo'];\n   *\n   * $urlMatcherFactoryProvider.type('listItem', {\n   *   encode: function(item) {\n   *     // Represent the list item in the URL using its corresponding index\n   *     return list.indexOf(item);\n   *   },\n   *   decode: function(item) {\n   *     // Look up the list item by index\n   *     return list[parseInt(item, 10)];\n   *   },\n   *   is: function(item) {\n   *     // Ensure the item is valid by checking to see that it appears\n   *     // in the list\n   *     return list.indexOf(item) > -1;\n   *   }\n   * });\n   *\n   * $stateProvider.state('list', {\n   *   url: \"/list/{item:listItem}\",\n   *   controller: function($scope, $stateParams) {\n   *     console.log($stateParams.item);\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * // Changes URL to '/list/3', logs \"Ringo\" to the console\n   * $state.go('list', { item: \"Ringo\" });\n   * </pre>\n   *\n   * This is a more complex example of a type that relies on dependency injection to\n   * interact with services, and uses the parameter name from the URL to infer how to\n   * handle encoding and decoding parameter values:\n   *\n   * <pre>\n   * // Defines a custom type that gets a value from a service,\n   * // where each service gets different types of values from\n   * // a backend API:\n   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {\n   *\n   *   // Matches up services to URL parameter names\n   *   var services = {\n   *     user: Users,\n   *     post: Posts\n   *   };\n   *\n   *   return {\n   *     encode: function(object) {\n   *       // Represent the object in the URL using its unique ID\n   *       return object.id;\n   *     },\n   *     decode: function(value, key) {\n   *       // Look up the object by ID, using the parameter\n   *       // name (key) to call the correct service\n   *       return services[key].findById(value);\n   *     },\n   *     is: function(object, key) {\n   *       // Check that object is a valid dbObject\n   *       return angular.isObject(object) && object.id && services[key];\n   *     }\n   *     equals: function(a, b) {\n   *       // Check the equality of decoded objects by comparing\n   *       // their unique IDs\n   *       return a.id === b.id;\n   *     }\n   *   };\n   * });\n   *\n   * // In a config() block, you can then attach URLs with\n   * // type-annotated parameters:\n   * $stateProvider.state('users', {\n   *   url: \"/users\",\n   *   // ...\n   * }).state('users.item', {\n   *   url: \"/{user:dbObject}\",\n   *   controller: function($scope, $stateParams) {\n   *     // $stateParams.user will now be an object returned from\n   *     // the Users service\n   *   },\n   *   // ...\n   * });\n   * </pre>\n   */\n  this.type = function (name, definition, definitionFn) {\n    if (!isDefined(definition)) return $types[name];\n    if ($types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\n    $types[name] = new Type(extend({ name: name }, definition));\n    if (definitionFn) {\n      typeQueue.push({ name: name, def: definitionFn });\n      if (!enqueue) flushTypeQueue();\n    }\n    return this;\n  };\n\n  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s\n  function flushTypeQueue() {\n    while(typeQueue.length) {\n      var type = typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      angular.extend($types[type.name], injector.invoke(type.def));\n    }\n  }\n\n  // Register default types. Store them in the prototype of $types.\n  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });\n  $types = inherit($types, {});\n\n  /* No need to document $get, since it returns this */\n  this.$get = ['$injector', function ($injector) {\n    injector = $injector;\n    enqueue = false;\n    flushTypeQueue();\n\n    forEach(defaultTypes, function(type, name) {\n      if (!$types[name]) $types[name] = new Type(type);\n    });\n    return this;\n  }];\n\n  this.Param = function Param(id, type, config, location) {\n    var self = this;\n    config = unwrapShorthand(config);\n    type = getType(config, type, location);\n    var arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === \"search\") : type;\n    if (type.name === \"string\" && !arrayMode && location === \"path\" && config.value === undefined)\n      config.value = \"\"; // for 0.2.x; in 0.3.0+ do not automatically default to \"\"\n    var isOptional = config.value !== undefined;\n    var squash = getSquashPolicy(config, isOptional);\n    var replace = getReplace(config, arrayMode, isOptional, squash);\n\n    function unwrapShorthand(config) {\n      var keys = isObject(config) ? objectKeys(config) : [];\n      var isShorthand = indexOf(keys, \"value\") === -1 && indexOf(keys, \"type\") === -1 &&\n                        indexOf(keys, \"squash\") === -1 && indexOf(keys, \"array\") === -1;\n      if (isShorthand) config = { value: config };\n      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };\n      return config;\n    }\n\n    function getType(config, urlType, location) {\n      if (config.type && urlType) throw new Error(\"Param '\"+id+\"' has two type configurations.\");\n      if (urlType) return urlType;\n      if (!config.type) return (location === \"config\" ? $types.any : $types.string);\n\n      if (angular.isString(config.type))\n        return $types[config.type];\n      if (config.type instanceof Type)\n        return config.type;\n      return new Type(config.type);\n    }\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      var arrayDefaults = { array: (location === \"search\" ? \"auto\" : false) };\n      var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    /**\n     * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n     */\n    function getSquashPolicy(config, isOptional) {\n      var squash = config.squash;\n      if (!isOptional || squash === false) return false;\n      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;\n      if (squash === true || isString(squash)) return squash;\n      throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n    }\n\n    function getReplace(config, arrayMode, isOptional, squash) {\n      var replace, configuredKeys, defaultPolicy = [\n        { from: \"\",   to: (isOptional || arrayMode ? undefined : \"\") },\n        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n      ];\n      replace = isArray(config.replace) ? config.replace : [];\n      if (isString(squash))\n        replace.push({ from: squash, to: undefined });\n      configuredKeys = map(replace, function(item) { return item.from; } );\n      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);\n    }\n\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    function $$getDefaultValue() {\n      if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      var defaultValue = injector.invoke(config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))\n        throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + self.id + \"' is not an instance of Type (\" + self.type.name + \")\");\n      return defaultValue;\n    }\n\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    function $value(value) {\n      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }\n      function $replace(value) {\n        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });\n        return replacement.length ? replacement[0] : value;\n      }\n      value = $replace(value);\n      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);\n    }\n\n    function toString() { return \"{Param:\" + id + \" \" + type + \" squash: '\" + squash + \"' optional: \" + isOptional + \"}\"; }\n\n    extend(this, {\n      id: id,\n      type: type,\n      location: location,\n      array: arrayMode,\n      squash: squash,\n      replace: replace,\n      isOptional: isOptional,\n      value: $value,\n      dynamic: undefined,\n      config: config,\n      toString: toString\n    });\n  };\n\n  function ParamSet(params) {\n    extend(this, params || {});\n  }\n\n  ParamSet.prototype = {\n    $$new: function() {\n      return inherit(this, extend(new ParamSet(), { $$parent: this}));\n    },\n    $$keys: function () {\n      var keys = [], chain = [], parent = this,\n        ignore = objectKeys(ParamSet.prototype);\n      while (parent) { chain.push(parent); parent = parent.$$parent; }\n      chain.reverse();\n      forEach(chain, function(paramset) {\n        forEach(objectKeys(paramset), function(key) {\n            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);\n        });\n      });\n      return keys;\n    },\n    $$values: function(paramValues) {\n      var values = {}, self = this;\n      forEach(self.$$keys(), function(key) {\n        values[key] = self[key].value(paramValues && paramValues[key]);\n      });\n      return values;\n    },\n    $$equals: function(paramValues1, paramValues2) {\n      var equal = true, self = this;\n      forEach(self.$$keys(), function(key) {\n        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];\n        if (!self[key].type.equals(left, right)) equal = false;\n      });\n      return equal;\n    },\n    $$validates: function $$validate(paramValues) {\n      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;\n      for (i = 0; i < keys.length; i++) {\n        param = this[keys[i]];\n        rawVal = paramValues[keys[i]];\n        if ((rawVal === undefined || rawVal === null) && param.isOptional)\n          break; // There was no parameter value, but the param is optional\n        normalized = param.type.$normalize(rawVal);\n        if (!param.type.is(normalized))\n          return false; // The value was not of the correct Type, and could not be decoded to the correct Type\n        encoded = param.type.encode(normalized);\n        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))\n          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp\n      }\n      return true;\n    },\n    $$parent: undefined\n  };\n\n  this.ParamSet = ParamSet;\n}\n\n// Register as a provider so it's available to other providers\nangular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);\n\n/**\n * @ngdoc object\n * @name ui.router.router.$urlRouterProvider\n *\n * @requires ui.router.util.$urlMatcherFactoryProvider\n * @requires $locationProvider\n *\n * @description\n * `$urlRouterProvider` has the responsibility of watching `$location`. \n * When `$location` changes it runs through a list of rules one by one until a \n * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify \n * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n *\n * There are several methods on `$urlRouterProvider` that make it useful to use directly\n * in your module config.\n */\n$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];\nfunction $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {\n  var rules = [], otherwise = null, interceptDeferred = false, listener;\n\n  // Returns a string that is a prefix of all strings matching the RegExp\n  function regExpPrefix(re) {\n    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n  }\n\n  // Interpolates matched values into a String.replace()-style pattern\n  function interpolate(pattern, match) {\n    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n      return match[what === '$' ? 0 : Number(what)];\n    });\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#rule\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines rules that are used by `$urlRouterProvider` to find matches for\n   * specific URLs.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {function} rule Handler function that takes `$injector` and `$location`\n   * services as arguments. You can use them to return a valid path as a string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.rule = function (rule) {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    rules.push(rule);\n    return this;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouterProvider#otherwise\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines a path that is used when an invalid route is requested.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|function} rule The url path you want to redirect to or a function \n   * rule that returns the url path. The function version is passed two params: \n   * `$injector` and `$location` services, and must return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.otherwise = function (rule) {\n    if (isString(rule)) {\n      var redirect = rule;\n      rule = function () { return redirect; };\n    }\n    else if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    otherwise = rule;\n    return this;\n  };\n\n\n  function handleIfMatch($injector, handler, match) {\n    if (!match) return false;\n    var result = $injector.invoke(handler, handler, { $match: match });\n    return isDefined(result) ? result : true;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#when\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable. It gets invoked if `$location`\n   * matches. You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} what The incoming path that you want to redirect.\n   * @param {string|function} handler The path you want to redirect your user to.\n   */\n  this.when = function (what, handler) {\n    var redirect, handlerIsString = isString(handler);\n    if (isString(what)) what = $urlMatcherFactory.compile(what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    var strategies = {\n      matcher: function (what, handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(handler);\n          handler = ['$match', function ($match) { return redirect.format($match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));\n        }, {\n          prefix: isString(what.prefix) ? what.prefix : ''\n        });\n      },\n      regex: function (what, handler) {\n        if (what.global || what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = handler;\n          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(what)\n        });\n      }\n    };\n\n    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#deferIntercept\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Disables (or enables) deferring location change interception.\n   *\n   * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n   * defer a transition but maintain the current URL), call this method at configuration time.\n   * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n   * `$locationChangeSuccess` event handler.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   // this allows you to configure custom behavior in between\n   *   // location changes and route synchronization:\n   *   $urlRouterProvider.deferIntercept();\n   *\n   * }).run(function ($rootScope, $urlRouter, UserService) {\n   *\n   *   $rootScope.$on('$locationChangeSuccess', function(e) {\n   *     // UserService is an example service for managing user state\n   *     if (UserService.isLoggedIn()) return;\n   *\n   *     // Prevent $urlRouter's default handler from firing\n   *     e.preventDefault();\n   *\n   *     UserService.handleLogin().then(function() {\n   *       // Once the user has logged in, sync the current URL\n   *       // to the router:\n   *       $urlRouter.sync();\n   *     });\n   *   });\n   *\n   *   // Configures $urlRouter's listener *after* your custom listener\n   *   $urlRouter.listen();\n   * });\n   * </pre>\n   *\n   * @param {boolean} defer Indicates whether to defer location change interception. Passing\n            no parameter is equivalent to `true`.\n   */\n  this.deferIntercept = function (defer) {\n    if (defer === undefined) defer = true;\n    interceptDeferred = defer;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouter\n   *\n   * @requires $location\n   * @requires $rootScope\n   * @requires $injector\n   * @requires $browser\n   *\n   * @description\n   *\n   */\n  this.$get = $get;\n  $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];\n  function $get(   $location,   $rootScope,   $injector,   $browser,   $sniffer) {\n\n    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;\n\n    function appendBasePath(url, isHtml5, absolute) {\n      if (baseHref === '/') return url;\n      if (isHtml5) return baseHref.slice(0, -1) + url;\n      if (absolute) return baseHref.slice(1) + url;\n      return url;\n    }\n\n    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n    function update(evt) {\n      if (evt && evt.defaultPrevented) return;\n      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;\n      lastPushedUrl = undefined;\n      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573\n      //if (ignoreUpdate) return true;\n\n      function check(rule) {\n        var handled = rule($injector, $location);\n\n        if (!handled) return false;\n        if (isString(handled)) $location.replace().url(handled);\n        return true;\n      }\n      var n = rules.length, i;\n\n      for (i = 0; i < n; i++) {\n        if (check(rules[i])) return;\n      }\n      // always check otherwise last to allow dynamic updates to the set of rules\n      if (otherwise) check(otherwise);\n    }\n\n    function listen() {\n      listener = listener || $rootScope.$on('$locationChangeSuccess', update);\n      return listener;\n    }\n\n    if (!interceptDeferred) listen();\n\n    return {\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#sync\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n       * with the transition by calling `$urlRouter.sync()`.\n       *\n       * @example\n       * <pre>\n       * angular.module('app', ['ui.router'])\n       *   .run(function($rootScope, $urlRouter) {\n       *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n       *       // Halt state change from even starting\n       *       evt.preventDefault();\n       *       // Perform custom logic\n       *       var meetsRequirement = ...\n       *       // Continue with the update and state transition if logic allows\n       *       if (meetsRequirement) $urlRouter.sync();\n       *     });\n       * });\n       * </pre>\n       */\n      sync: function() {\n        update();\n      },\n\n      listen: function() {\n        return listen();\n      },\n\n      update: function(read) {\n        if (read) {\n          location = $location.url();\n          return;\n        }\n        if ($location.url() === location) return;\n\n        $location.url(location);\n        $location.replace();\n      },\n\n      push: function(urlMatcher, params, options) {\n         var url = urlMatcher.format(params || {});\n\n        // Handle the special hash param, if needed\n        if (url !== null && params && params['#']) {\n            url += '#' + params['#'];\n        }\n\n        $location.url(url);\n        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;\n        if (options && options.replace) $location.replace();\n      },\n\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#href\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * A URL generation method that returns the compiled URL for a given\n       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n       *\n       * @example\n       * <pre>\n       * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n       *   person: \"bob\"\n       * });\n       * // $bob == \"/about/bob\";\n       * </pre>\n       *\n       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n       * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n       *\n       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n       */\n      href: function(urlMatcher, params, options) {\n        if (!urlMatcher.validates(params)) return null;\n\n        var isHtml5 = $locationProvider.html5Mode();\n        if (angular.isObject(isHtml5)) {\n          isHtml5 = isHtml5.enabled;\n        }\n\n        isHtml5 = isHtml5 && $sniffer.history;\n        \n        var url = urlMatcher.format(params);\n        options = options || {};\n\n        if (!isHtml5 && url !== null) {\n          url = \"#\" + $locationProvider.hashPrefix() + url;\n        }\n\n        // Handle special hash param, if needed\n        if (url !== null && params && params['#']) {\n          url += '#' + params['#'];\n        }\n\n        url = appendBasePath(url, isHtml5, options.absolute);\n\n        if (!options.absolute || !url) {\n          return url;\n        }\n\n        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();\n        port = (port === 80 || port === 443 ? '' : ':' + port);\n\n        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');\n      }\n    };\n  }\n}\n\nangular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\n$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];\nfunction $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {\n\n  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';\n\n  // Builds state properties from definition passed to registerState()\n  var stateBuilder = {\n\n    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.\n    // state.children = [];\n    // if (parent) parent.children.push(state);\n    parent: function(state) {\n      if (isDefined(state.parent) && state.parent) return findState(state.parent);\n      // regex matches any valid composite state name\n      // would match \"contact.list\" but not \"contacts\"\n      var compositeName = /^(.+)\\.[^.]+$/.exec(state.name);\n      return compositeName ? findState(compositeName[1]) : root;\n    },\n\n    // inherit 'data' from parent and override by own values (if any)\n    data: function(state) {\n      if (state.parent && state.parent.data) {\n        state.data = state.self.data = inherit(state.parent.data, state.data);\n      }\n      return state.data;\n    },\n\n    // Build a URLMatcher if necessary, either via a relative or absolute URL\n    url: function(state) {\n      var url = state.url, config = { params: state.params || {} };\n\n      if (isString(url)) {\n        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);\n        return (state.parent.navigable || root).url.concat(url, config);\n      }\n\n      if (!url || $urlMatcherFactory.isMatcher(url)) return url;\n      throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n    },\n\n    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n    navigable: function(state) {\n      return state.url ? state : (state.parent ? state.parent.navigable : null);\n    },\n\n    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params\n    ownParams: function(state) {\n      var params = state.url && state.url.params || new $$UMFP.ParamSet();\n      forEach(state.params || {}, function(config, id) {\n        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, \"config\");\n      });\n      return params;\n    },\n\n    // Derive parameters for this state and ensure they're a super-set of parent's parameters\n    params: function(state) {\n      var ownParams = pick(state.ownParams, state.ownParams.$$keys());\n      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();\n    },\n\n    // If there is no explicit multi-view configuration, make one up so we don't have\n    // to handle both cases in the view directive later. Note that having an explicit\n    // 'views' property will mean the default unnamed view properties are ignored. This\n    // is also a good time to resolve view names to absolute names, so everything is a\n    // straight lookup at link time.\n    views: function(state) {\n      var views = {};\n\n      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {\n        if (name.indexOf('@') < 0) name += '@' + state.parent.name;\n        view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';\n        views[name] = view;\n      });\n      return views;\n    },\n\n    // Keep a full path from the root down to this state as this is needed for state activation.\n    path: function(state) {\n      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path\n    },\n\n    // Speed up $state.contains() as it's used a lot\n    includes: function(state) {\n      var includes = state.parent ? extend({}, state.parent.includes) : {};\n      includes[state.name] = true;\n      return includes;\n    },\n\n    $delegates: {}\n  };\n\n  function isRelative(stateName) {\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n  function findState(stateOrName, base) {\n    if (!stateOrName) return undefined;\n\n    var isStr = isString(stateOrName),\n        name  = isStr ? stateOrName : stateOrName.name,\n        path  = isRelative(name);\n\n    if (path) {\n      if (!base) throw new Error(\"No reference point given for path '\"  + name + \"'\");\n      base = findState(base);\n      \n      var rel = name.split(\".\"), i = 0, pathLength = rel.length, current = base;\n\n      for (; i < pathLength; i++) {\n        if (rel[i] === \"\" && i === 0) {\n          current = base;\n          continue;\n        }\n        if (rel[i] === \"^\") {\n          if (!current.parent) throw new Error(\"Path '\" + name + \"' not valid for state '\" + base.name + \"'\");\n          current = current.parent;\n          continue;\n        }\n        break;\n      }\n      rel = rel.slice(i).join(\".\");\n      name = current.name + (current.name && rel ? \".\" : \"\") + rel;\n    }\n    var state = states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    }\n    return undefined;\n  }\n\n  function queueState(parentName, state) {\n    if (!queue[parentName]) {\n      queue[parentName] = [];\n    }\n    queue[parentName].push(state);\n  }\n\n  function flushQueuedChildren(parentName) {\n    var queued = queue[parentName] || [];\n    while(queued.length) {\n      registerState(queued.shift());\n    }\n  }\n\n  function registerState(state) {\n    // Wrap a new object around the state so we can store our private details easily.\n    state = inherit(state, {\n      self: state,\n      resolve: state.resolve || {},\n      toString: function() { return this.name; }\n    });\n\n    var name = state.name;\n    if (!isString(name) || name.indexOf('@') >= 0) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(name)) throw new Error(\"State '\" + name + \"' is already defined\");\n\n    // Get parent name\n    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))\n        : (isString(state.parent)) ? state.parent\n        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name\n        : '';\n\n    // If parent is not registered yet, add state to queue and register later\n    if (parentName && !states[parentName]) {\n      return queueState(parentName, state.self);\n    }\n\n    for (var key in stateBuilder) {\n      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);\n    }\n    states[name] = state;\n\n    // Register the state in the global state list and with $urlRouter if necessary.\n    if (!state[abstractKey] && state.url) {\n      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {\n          $state.transitionTo(state, $match, { inherit: true, location: false });\n        }\n      }]);\n    }\n\n    // Register any queued children\n    flushQueuedChildren(name);\n\n    return state;\n  }\n\n  // Checks text to see if it looks like a glob.\n  function isGlob (text) {\n    return text.indexOf('*') > -1;\n  }\n\n  // Returns true if glob matches current $state name.\n  function doesStateMatchGlob (glob) {\n    var globSegments = glob.split('.'),\n        segments = $state.$current.name.split('.');\n\n    //match single stars\n    for (var i = 0, l = globSegments.length; i < l; i++) {\n      if (globSegments[i] === '*') {\n        segments[i] = '*';\n      }\n    }\n\n    //match greedy starts\n    if (globSegments[0] === '**') {\n       segments = segments.slice(indexOf(segments, globSegments[1]));\n       segments.unshift('**');\n    }\n    //match greedy ends\n    if (globSegments[globSegments.length - 1] === '**') {\n       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);\n       segments.push('**');\n    }\n\n    if (globSegments.length != segments.length) {\n      return false;\n    }\n\n    return segments.join('') === globSegments.join('');\n  }\n\n\n  // Implicit root state that is always active\n  root = registerState({\n    name: '',\n    url: '^',\n    views: null,\n    'abstract': true\n  });\n  root.navigable = null;\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the \n   * `stateBuilder` object used internally by `$stateProvider`. This can be used \n   * to add custom functionality to ui-router, for example inferring templateUrl \n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new \n   * properties within the state's internal definition. There is currently no clear \n   * use-case for this beyond accessing internal states (i.e. $state.$current), \n   * however, expect this to become increasingly relevant as we introduce additional \n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of \n   * execution of the builder functions in non-deterministic. Builder functions \n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is \n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to \n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view \n   *   name (i.e. \"viewName@stateName\") and each value is the config object \n   *   (template, controller) for the view. Even when you don't use the views object \n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template \n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state, \n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state. \n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that \n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   var result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     var autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate. \n   * @param {object} func A function that is responsible for decorating the original \n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  this.decorator = decorator;\n  function decorator(name, func) {\n    /*jshint validthis: true */\n    if (isString(name) && !isDefined(func)) {\n      return stateBuilder[name];\n    }\n    if (!isFunction(func) || !isString(name)) {\n      return this;\n    }\n    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {\n      stateBuilder.$delegates[name] = stateBuilder[name];\n    }\n    stateBuilder[name] = func;\n    return this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} stateConfig State configuration object.\n   * @param {string|function=} stateConfig.template\n   * <a id='template'></a>\n   *   html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property \n   *   takes precedence over templateUrl.\n   *   \n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <pre>template:\n   *   \"<h1>inline template definition</h1>\" +\n   *   \"<div ui-view></div>\"</pre>\n   * <pre>template: function(params) {\n   *       return \"<h1>generated template</h1>\"; }</pre>\n   * </div>\n   *\n   * @param {string|function=} stateConfig.templateUrl\n   * <a id='templateUrl'></a>\n   *\n   *   path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *   \n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by \n   *     applying the current state\n   *\n   * <pre>templateUrl: \"home.html\"</pre>\n   * <pre>templateUrl: function(params) {\n   *     return myTemplates[params.pageId]; }</pre>\n   *\n   * @param {function=} stateConfig.templateProvider\n   * <a id='templateProvider'></a>\n   *    Provider function that returns HTML content string.\n   * <pre> templateProvider:\n   *       function(MyTemplateService, params) {\n   *         return MyTemplateService.getTemplate(params.pageId);\n   *       }</pre>\n   *\n   * @param {string|function=} stateConfig.controller\n   * <a id='controller'></a>\n   *\n   *  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *   Optionally, the ControllerAs may be declared here.\n   * <pre>controller: \"MyRegisteredController\"</pre>\n   * <pre>controller:\n   *     \"MyRegisteredController as fooCtrl\"}</pre>\n   * <pre>controller: function($scope, MyService) {\n   *     $scope.data = MyService.getData(); }</pre>\n   *\n   * @param {function=} stateConfig.controllerProvider\n   * <a id='controllerProvider'></a>\n   *\n   * Injectable provider function that returns the actual controller or string.\n   * <pre>controllerProvider:\n   *   function(MyResolveData) {\n   *     if (MyResolveData.foo)\n   *       return \"FooCtrl\"\n   *     else if (MyResolveData.bar)\n   *       return \"BarCtrl\";\n   *     else return function($scope) {\n   *       $scope.baz = \"Qux\";\n   *     }\n   *   }</pre>\n   *\n   * @param {string=} stateConfig.controllerAs\n   * <a id='controllerAs'></a>\n   * \n   * A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   * <pre>controllerAs: \"myCtrl\"</pre>\n   *\n   * @param {string|object=} stateConfig.parent\n   * <a id='parent'></a>\n   * Optionally specifies the parent state of this state.\n   *\n   * <pre>parent: 'parentState'</pre>\n   * <pre>parent: parentState // JS variable</pre>\n   *\n   * @param {object=} stateConfig.resolve\n   * <a id='resolve'></a>\n   *\n   * An optional map&lt;string, function&gt; of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises, \n   *   the router will wait for them all to be resolved before the controller is instantiated.\n   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired\n   *   and the values of the resolved promises are injected into any controllers that reference them.\n   *   If any  of the promises are rejected the $stateChangeError event is fired.\n   *\n   *   The map object is:\n   *   \n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, \n   *     it is injected and return value it treated as dependency. If result is a promise, it is \n   *     resolved before its value is injected into controller.\n   *\n   * <pre>resolve: {\n   *     myResolve1:\n   *       function($http, $stateParams) {\n   *         return $http.get(\"/api/foos/\"+stateParams.fooID);\n   *       }\n   *     }</pre>\n   *\n   * @param {string=} stateConfig.url\n   * <a id='url'></a>\n   *\n   *   A url fragment with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any \n   *   parameters that were passed.\n   *\n   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for\n   *   more details on acceptable patterns )\n   *\n   * examples:\n   * <pre>url: \"/home\"\n   * url: \"/users/:userid\"\n   * url: \"/books/{bookid:[a-zA-Z_-]}\"\n   * url: \"/books/{categoryid:int}\"\n   * url: \"/books/{publishername:string}/{categoryid:int}\"\n   * url: \"/messages?before&after\"\n   * url: \"/messages?{before:date}&{after:date}\"\n   * url: \"/messages/:mailboxid?{before:date}&{after:date}\"\n   * </pre>\n   *\n   * @param {object=} stateConfig.views\n   * <a id='views'></a>\n   * an optional map&lt;string, object&gt; which defined multiple views, or targets views\n   * manually/explicitly.\n   *\n   * Examples:\n   *\n   * Targets three named `ui-view`s in the parent state's template\n   * <pre>views: {\n   *     header: {\n   *       controller: \"headerCtrl\",\n   *       templateUrl: \"header.html\"\n   *     }, body: {\n   *       controller: \"bodyCtrl\",\n   *       templateUrl: \"body.html\"\n   *     }, footer: {\n   *       controller: \"footCtrl\",\n   *       templateUrl: \"footer.html\"\n   *     }\n   *   }</pre>\n   *\n   * Targets named `ui-view=\"header\"` from grandparent state 'top''s template, and named `ui-view=\"body\" from parent state's template.\n   * <pre>views: {\n   *     'header@top': {\n   *       controller: \"msgHeaderCtrl\",\n   *       templateUrl: \"msgHeader.html\"\n   *     }, 'body': {\n   *       controller: \"messagesCtrl\",\n   *       templateUrl: \"messages.html\"\n   *     }\n   *   }</pre>\n   *\n   * @param {boolean=} [stateConfig.abstract=false]\n   * <a id='abstract'></a>\n   * An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   * <pre>abstract: true</pre>\n   *\n   * @param {function=} stateConfig.onEnter\n   * <a id='onEnter'></a>\n   *\n   * Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explicitly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onEnter: function(MyService, $stateParams) {\n   *     MyService.foo($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {function=} stateConfig.onExit\n   * <a id='onExit'></a>\n   *\n   * Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explicitly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onExit: function(MyService, $stateParams) {\n   *     MyService.cleanup($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {boolean=} [stateConfig.reloadOnSearch=true]\n   * <a id='reloadOnSearch'></a>\n   *\n   * If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). \n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   * <pre>reloadOnSearch: false</pre>\n   *\n   * @param {object=} stateConfig.data\n   * <a id='data'></a>\n   *\n   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is\n   *   prototypally inherited.  In other words, adding a data property to a state adds it to\n   *   the entire subtree via prototypal inheritance.\n   *\n   * <pre>data: {\n   *     requiredRole: 'foo'\n   * } </pre>\n   *\n   * @param {object=} stateConfig.params\n   * <a id='params'></a>\n   *\n   * A map which optionally configures parameters declared in the `url`, or\n   *   defines additional non-url parameters.  For each parameter being\n   *   configured, add a configuration object keyed to the name of the parameter.\n   *\n   *   Each parameter configuration object may contain the following properties:\n   *\n   *   - ** value ** - {object|function=}: specifies the default value for this\n   *     parameter.  This implicitly sets this parameter as optional.\n   *\n   *     When UI-Router routes to a state and no value is\n   *     specified for this parameter in the URL or transition, the\n   *     default value will be used instead.  If `value` is a function,\n   *     it will be injected and invoked, and the return value used.\n   *\n   *     *Note*: `undefined` is treated as \"no default value\" while `null`\n   *     is treated as \"the default value is `null`\".\n   *\n   *     *Shorthand*: If you only need to configure the default value of the\n   *     parameter, you may use a shorthand syntax.   In the **`params`**\n   *     map, instead mapping the param name to a full parameter configuration\n   *     object, simply set map it to the default parameter value, e.g.:\n   *\n   * <pre>// define a parameter's default value\n   * params: {\n   *     param1: { value: \"defaultValue\" }\n   * }\n   * // shorthand default values\n   * params: {\n   *     param1: \"defaultValue\",\n   *     param2: \"param2Default\"\n   * }</pre>\n   *\n   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be\n   *     treated as an array of values.  If you specified a Type, the value will be\n   *     treated as an array of the specified Type.  Note: query parameter values\n   *     default to a special `\"auto\"` mode.\n   *\n   *     For query parameters in `\"auto\"` mode, if multiple  values for a single parameter\n   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values\n   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if\n   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single\n   *     value (e.g.: `{ foo: '1' }`).\n   *\n   * <pre>params: {\n   *     param1: { array: true }\n   * }</pre>\n   *\n   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when\n   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the\n   *     configured default squash policy.\n   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})\n   *\n   *   There are three squash settings:\n   *\n   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL\n   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed\n   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.\n   *       This can allow for cleaner looking URLs.\n   *     - `\"<arbitrary string>\"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.\n   *\n   * <pre>params: {\n   *     param1: {\n   *       value: \"defaultId\",\n   *       squash: true\n   * } }\n   * // squash \"defaultValue\" to \"~\"\n   * params: {\n   *     param1: {\n   *       value: \"defaultValue\",\n   *       squash: \"~\"\n   * } }\n   * </pre>\n   *\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   */\n  this.state = state;\n  function state(name, definition) {\n    /*jshint validthis: true */\n    if (isObject(name)) definition = name;\n    else definition.name = name;\n    registerState(definition);\n    return this;\n  }\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$state\n   *\n   * @requires $rootScope\n   * @requires $q\n   * @requires ui.router.state.$view\n   * @requires $injector\n   * @requires ui.router.util.$resolve\n   * @requires ui.router.state.$stateParams\n   * @requires ui.router.router.$urlRouter\n   *\n   * @property {object} params A param object, e.g. {sectionId: section.id)}, that \n   * you'd like to test against the current active state.\n   * @property {object} current A reference to the state's config object. However \n   * you passed it in. Useful for accessing custom data.\n   * @property {object} transition Currently pending transition. A promise that'll \n   * resolve or reject.\n   *\n   * @description\n   * `$state` service is responsible for representing states as well as transitioning\n   * between them. It also provides interfaces to ask for current state or even states\n   * you're coming from.\n   */\n  this.$get = $get;\n  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];\n  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {\n\n    var TransitionSuperseded = $q.reject(new Error('transition superseded'));\n    var TransitionPrevented = $q.reject(new Error('transition prevented'));\n    var TransitionAborted = $q.reject(new Error('transition aborted'));\n    var TransitionFailed = $q.reject(new Error('transition failed'));\n\n    // Handles the case where a state which is the target of a transition is not found, and the user\n    // can optionally retry or defer the transition\n    function handleRedirect(redirect, state, params, options) {\n      /**\n       * @ngdoc event\n       * @name ui.router.state.$state#$stateNotFound\n       * @eventOf ui.router.state.$state\n       * @eventType broadcast on root scope\n       * @description\n       * Fired when a requested state **cannot be found** using the provided state name during transition.\n       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by\n       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,\n       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the\n       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.\n       *\n       * @param {Object} event Event object.\n       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.\n       * @param {State} fromState Current state object.\n       * @param {Object} fromParams Current state params.\n       *\n       * @example\n       *\n       * <pre>\n       * // somewhere, assume lazy.state has not been defined\n       * $state.go(\"lazy.state\", {a:1, b:2}, {inherit:false});\n       *\n       * // somewhere else\n       * $scope.$on('$stateNotFound',\n       * function(event, unfoundState, fromState, fromParams){\n       *     console.log(unfoundState.to); // \"lazy.state\"\n       *     console.log(unfoundState.toParams); // {a:1, b:2}\n       *     console.log(unfoundState.options); // {inherit:false} + default options\n       * })\n       * </pre>\n       */\n      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);\n\n      if (evt.defaultPrevented) {\n        $urlRouter.update();\n        return TransitionAborted;\n      }\n\n      if (!evt.retry) {\n        return null;\n      }\n\n      // Allow the handler to return a promise to defer state lookup retry\n      if (options.$retry) {\n        $urlRouter.update();\n        return TransitionFailed;\n      }\n      var retryTransition = $state.transition = $q.when(evt.retry);\n\n      retryTransition.then(function() {\n        if (retryTransition !== $state.transition) return TransitionSuperseded;\n        redirect.options.$retry = true;\n        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);\n      }, function() {\n        return TransitionAborted;\n      });\n      $urlRouter.update();\n\n      return retryTransition;\n    }\n\n    root.locals = { resolve: null, globals: { $stateParams: {} } };\n\n    $state = {\n      params: {},\n      current: root.self,\n      $current: root,\n      transition: null\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#reload\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method that force reloads the current state. All resolves are re-resolved,\n     * controllers reinstantiated, and events re-fired.\n     *\n     * @example\n     * <pre>\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n     *\n     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.\n     * @example\n     * <pre>\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' \n     * //and current state is 'contacts.detail.item'\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.reload = function reload(state) {\n      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#go\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Convenience method for transitioning to a new state. `$state.go` calls \n     * `$state.transitionTo` internally but automatically sets options to \n     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. \n     * This allows you to easily use an absolute or relative to path and specify \n     * only the parameters you'd like to update (while letting unspecified parameters \n     * inherit from the currently active ancestor states).\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * </pre>\n     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n     *\n     * @param {string} to Absolute state name or relative state path. Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to a parent state\n     * - `$state.go('^.sibling')` - will go to a sibling state\n     * - `$state.go('.child.grandchild')` - will go to grandchild state\n     *\n     * @param {object=} params A map of the parameters that will be sent to the state, \n     * will populate $stateParams. Any parameters that are not specified will be inherited from currently \n     * defined parameters. Only parameters specified in the state definition can be overridden, new \n     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters\n     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n     * will get you all current parameters, etc.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params\n     *    have changed.  It will reload the resolves and views of the current state and parent states.\n     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \\\n     *    the transition reloads the resolves and views for that matched state, and all its children states.\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     *\n     * Possible success values:\n     *\n     * - $state.current\n     *\n     * <br/>Possible rejection values:\n     *\n     * - 'transition superseded' - when a newer transition has been started after this one\n     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n     *   when a `$stateNotFound` `event.retry` promise errors.\n     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n     * - *resolve error* - when an error has occurred with a `resolve`\n     *\n     */\n    $state.go = function go(to, params, options) {\n      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#transitionTo\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * </pre>\n     *\n     * @param {string} to State name.\n     * @param {object=} toParams A map of the parameters that will be sent to the state,\n     * will populate $stateParams.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params \n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n     *    use this when you want to force a reload when *everything* is the same, including search params.\n     *    if String, then will reload the state with the name given in reload, and any children.\n     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.\n     *\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.transitionTo = function transitionTo(to, toParams, options) {\n      toParams = toParams || {};\n      options = extend({\n        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false\n      }, options || {});\n\n      var from = $state.$current, fromParams = $state.params, fromPath = from.path;\n      var evt, toState = findState(to, options.relative);\n\n      // Store the hash param for later (since it will be stripped out by various methods)\n      var hash = toParams['#'];\n\n      if (!isDefined(toState)) {\n        var redirect = { to: to, toParams: toParams, options: options };\n        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);\n\n        if (redirectResult) {\n          return redirectResult;\n        }\n\n        // Always retry once if the $stateNotFound was not prevented\n        // (handles either redirect changed or state lazy-definition)\n        to = redirect.to;\n        toParams = redirect.toParams;\n        options = redirect.options;\n        toState = findState(to, options.relative);\n\n        if (!isDefined(toState)) {\n          if (!options.relative) throw new Error(\"No such state '\" + to + \"'\");\n          throw new Error(\"Could not resolve '\" + to + \"' from state '\" + options.relative + \"'\");\n        }\n      }\n      if (toState[abstractKey]) throw new Error(\"Cannot transition to abstract state '\" + to + \"'\");\n      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);\n      if (!toState.params.$$validates(toParams)) return TransitionFailed;\n\n      toParams = toState.params.$$values(toParams);\n      to = toState;\n\n      var toPath = to.path;\n\n      // Starting from the root of the path, keep all levels that haven't changed\n      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];\n\n      if (!options.reload) {\n        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      } else if (isString(options.reload) || isObject(options.reload)) {\n        if (isObject(options.reload) && !options.reload.name) {\n          throw new Error('Invalid reload state object');\n        }\n        \n        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);\n        if (options.reload && !reloadState) {\n          throw new Error(\"No such reload state '\" + (isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        }\n\n        while (state && state === fromPath[keep] && state !== reloadState) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      }\n\n      // If we're going to the same state and all locals are kept, we've got nothing to do.\n      // But clear 'transition', as we still want to cancel any other pending transitions.\n      // TODO: We may not want to bump 'transition' if we're called from a location change\n      // that we've initiated ourselves, because we might accidentally abort a legitimate\n      // transition initiated from code?\n      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {\n        if (hash) toParams['#'] = hash;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);\n        if (options.location && to.navigable && to.navigable.url) {\n          $urlRouter.push(to.navigable.url, toParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n          $urlRouter.update(true);\n        }\n        $state.transition = null;\n        return $q.when($state.current);\n      }\n\n      // Filter parameters before we pass them to event handlers etc.\n      toParams = filterByKeys(to.params.$$keys(), toParams || {});\n      \n      // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart\n      if (hash) toParams['#'] = hash;\n      \n      // Broadcast start event and cancel the transition if requested\n      if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeStart\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when the state transition **begins**. You can use `event.preventDefault()`\n         * to prevent the transition from happening and then the transition promise will be\n         * rejected with a `'transition prevented'` value.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         *\n         * @example\n         *\n         * <pre>\n         * $rootScope.$on('$stateChangeStart',\n         * function(event, toState, toParams, fromState, fromParams){\n         *     event.preventDefault();\n         *     // transitionTo() promise will be rejected with\n         *     // a 'transition prevented' error\n         * })\n         * </pre>\n         */\n        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n          //Don't update and resync url if there's been a new transition started. see issue #2238, #600\n          if ($state.transition == null) $urlRouter.update();\n          return TransitionPrevented;\n        }\n      }\n\n      // Resolve locals for the remaining states, but don't update any global state just\n      // yet -- if anything fails to resolve the current state needs to remain untouched.\n      // We also set up an inheritance chain for the locals here. This allows the view directive\n      // to quickly look up the correct definition for each view in the current state. Even\n      // though we create the locals object itself outside resolveState(), it is initially\n      // empty and gets filled asynchronously. We need to keep track of the promise for the\n      // (fully resolved) current locals, and pass this down the chain.\n      var resolved = $q.when(locals);\n\n      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {\n        locals = toLocals[l] = inherit(locals);\n        resolved = resolveState(state, toParams, state === to, resolved, locals, options);\n      }\n\n      // Once everything is resolved, we are ready to perform the actual transition\n      // and return a promise for the new state. We also keep track of what the\n      // current promise is, so that we can detect overlapping transitions and\n      // keep only the outcome of the last transition.\n      var transition = $state.transition = resolved.then(function () {\n        var l, entering, exiting;\n\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        // Exit 'from' states not kept\n        for (l = fromPath.length - 1; l >= keep; l--) {\n          exiting = fromPath[l];\n          if (exiting.self.onExit) {\n            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);\n          }\n          exiting.locals = null;\n        }\n\n        // Enter 'to' states not kept\n        for (l = keep; l < toPath.length; l++) {\n          entering = toPath[l];\n          entering.locals = toLocals[l];\n          if (entering.self.onEnter) {\n            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);\n          }\n        }\n\n        // Run it again, to catch any transitions in callbacks\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        // Update globals in $state\n        $state.$current = to;\n        $state.current = to.self;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        $state.transition = null;\n\n        if (options.location && to.navigable) {\n          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n        }\n\n        if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeSuccess\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired once the state transition is **complete**.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         */\n          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);\n        }\n        $urlRouter.update(true);\n\n        return $state.current;\n      }).then(null, function (error) {\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        $state.transition = null;\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeError\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when an **error occurs** during transition. It's important to note that if you\n         * have any errors in your resolve functions (javascript errors, non-existent services, etc)\n         * they will not throw traditionally. You must listen for this $stateChangeError event to\n         * catch **ALL** errors.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         * @param {Error} error The resolve error object.\n         */\n        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);\n\n        if (!evt.defaultPrevented) {\n            $urlRouter.update();\n        }\n\n        return $q.reject(error);\n      });\n\n      return transition;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#is\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n     * but only checks for the full state name. If params is supplied then it will be\n     * tested for strict equality against the current active params object, so all params\n     * must match with none missing and no extras.\n     *\n     * @example\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     * test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it is the state.\n     */\n    $state.is = function is(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) { return undefined; }\n      if ($state.$current !== state) { return false; }\n      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#includes\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * @example\n     * Partial and relative names\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     *\n     * // Using relative names (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n     * </pre>\n     *\n     * Basic globbing patterns\n     * <pre>\n     * $state.$current.name = 'contacts.details.item.url';\n     *\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * </pre>\n     *\n     * @param {string} stateOrName A partial name, relative name, or glob pattern\n     * to be searched for within the current state name.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n     * that you'd like to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n     * .includes will test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    $state.includes = function includes(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      if (isString(stateOrName) && isGlob(stateOrName)) {\n        if (!doesStateMatchGlob(stateOrName)) {\n          return false;\n        }\n        stateOrName = $state.$current.name;\n      }\n\n      var state = findState(stateOrName, options.relative);\n      if (!isDefined(state)) { return undefined; }\n      if (!isDefined($state.$current.includes[state.name])) { return false; }\n      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;\n    };\n\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#href\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A url generation method that returns the compiled url for the given state populated with the given params.\n     *\n     * @example\n     * <pre>\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n     * @param {object=} params An object of parameter values to fill the state's required parameters.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n     *    ancestor with a valid url).\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     * \n     * @returns {string} compiled state url\n     */\n    $state.href = function href(stateOrName, params, options) {\n      options = extend({\n        lossy:    true,\n        inherit:  true,\n        absolute: false,\n        relative: $state.$current\n      }, options || {});\n\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) return null;\n      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);\n      \n      var nav = (state && options.lossy) ? state.navigable : state;\n\n      if (!nav || nav.url === undefined || nav.url === null) {\n        return null;\n      }\n      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {\n        absolute: options.absolute\n      });\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#get\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Returns the state configuration object for any specific state or all states.\n     *\n     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for\n     * the requested state. If not provided, returns an array of ALL state configs.\n     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.\n     * @returns {Object|Array} State configuration object or array of all objects.\n     */\n    $state.get = function (stateOrName, context) {\n      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });\n      var state = findState(stateOrName, context || $state.$current);\n      return (state && state.self) ? state.self : null;\n    };\n\n    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {\n      // Make a restricted $stateParams with only the parameters that apply to this state if\n      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,\n      // we also need $stateParams to be available for any $injector calls we make during the\n      // dependency resolution process.\n      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);\n      var locals = { $stateParams: $stateParams };\n\n      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.\n      // We're also including $stateParams in this; that way the parameters are restricted\n      // to the set that should be visible to the state, and are independent of when we update\n      // the global $state and $stateParams values.\n      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);\n      var promises = [dst.resolve.then(function (globals) {\n        dst.globals = globals;\n      })];\n      if (inherited) promises.push(inherited);\n\n      function resolveViews() {\n        var viewsPromises = [];\n\n        // Resolve template and dependencies for all views.\n        forEach(state.views, function (view, name) {\n          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});\n          injectables.$template = [ function () {\n            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';\n          }];\n\n          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {\n            // References to the controller (only instantiated at link time)\n            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {\n              var injectLocals = angular.extend({}, injectables, dst.globals);\n              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);\n            } else {\n              result.$$controller = view.controller;\n            }\n            // Provide access to the state itself for internal use\n            result.$$state = state;\n            result.$$controllerAs = view.controllerAs;\n            result.$$resolveAs = view.resolveAs;\n            dst[name] = result;\n          }));\n        });\n\n        return $q.all(viewsPromises).then(function(){\n          return dst.globals;\n        });\n      }\n\n      // Wait for all the promises and then return the activation object\n      return $q.all(promises).then(resolveViews).then(function (values) {\n        return dst;\n      });\n    }\n\n    return $state;\n  }\n\n  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {\n    // Return true if there are no differences in non-search (path/object) params, false if there are differences\n    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {\n      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.\n      function notSearchParam(key) {\n        return fromAndToState.params[key].location != \"search\";\n      }\n      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);\n      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));\n      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);\n      return nonQueryParamSet.$$equals(fromParams, toParams);\n    }\n\n    // If reload was not explicitly requested\n    // and we're transitioning to the same state we're already in\n    // and    the locals didn't change\n    //     or they changed in a way that doesn't merit reloading\n    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)\n    // Then return true.\n    if (!options.reload && to === from &&\n      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {\n      return true;\n    }\n  }\n}\n\nangular.module('ui.router.state')\n  .factory('$stateParams', function () { return {}; })\n  .constant(\"$state.runtime\", { autoinject: true })\n  .provider('$state', $StateProvider)\n  // Inject $state to initialize when entering runtime. #2574\n  .run(['$injector', function ($injector) {\n    // Allow tests (stateSpec.js) to turn this off by defining this constant\n    if ($injector.get(\"$state.runtime\").autoinject) {\n      $injector.get('$state');\n    }\n  }]);\n\n\n$ViewProvider.$inject = [];\nfunction $ViewProvider() {\n\n  this.$get = $get;\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$view\n   *\n   * @requires ui.router.util.$templateFactory\n   * @requires $rootScope\n   *\n   * @description\n   *\n   */\n  $get.$inject = ['$rootScope', '$templateFactory'];\n  function $get(   $rootScope,   $templateFactory) {\n    return {\n      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$view#load\n       * @methodOf ui.router.state.$view\n       *\n       * @description\n       *\n       * @param {string} name name\n       * @param {object} options option object.\n       */\n      load: function load(name, options) {\n        var result, defaults = {\n          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}\n        };\n        options = extend(defaults, options);\n\n        if (options.view) {\n          result = $templateFactory.fromConfig(options.view, options.params, options.locals);\n        }\n        return result;\n      }\n    };\n  }\n}\n\nangular.module('ui.router.state').provider('$view', $ViewProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$uiViewScrollProvider\n *\n * @description\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n */\nfunction $ViewScrollProvider() {\n\n  var useAnchorScroll = false;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n   * @methodOf ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n   * scrolling based on the url anchor.\n   */\n  this.useAnchorScroll = function () {\n    useAnchorScroll = true;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScroll\n   *\n   * @requires $anchorScroll\n   * @requires $timeout\n   *\n   * @description\n   * When called with a jqLite element, it scrolls the element into view (after a\n   * `$timeout` so the DOM has time to refresh).\n   *\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n    if (useAnchorScroll) {\n      return $anchorScroll;\n    }\n\n    return function ($element) {\n      return $timeout(function () {\n        $element[0].scrollIntoView();\n      }, 0, false);\n    };\n  }];\n}\n\nangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-view\n *\n * @requires ui.router.state.$state\n * @requires $compile\n * @requires $controller\n * @requires $injector\n * @requires ui.router.state.$uiViewScroll\n * @requires $document\n *\n * @restrict ECA\n *\n * @description\n * The ui-view directive tells $state where to place your templates.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * @example\n * A view can be unnamed or named.\n * <pre>\n * <!-- Unnamed -->\n * <div ui-view></div>\n *\n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * </pre>\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a\n * single view and it is unnamed then you can populate it like so:\n * <pre>\n * <div ui-view></div>\n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * </pre>\n *\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}\n * config property, by name, in this case an empty name:\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * But typically you'll only use the views property if you name your view or have more than one view\n * in the same template. There's not really a compelling reason to name a view if its the only one,\n * but you could if you wanted, like so:\n * <pre>\n * <div ui-view=\"main\"></div>\n * </pre>\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * Really though, you'll use views to set up multiple views:\n * <pre>\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div>\n * <div ui-view=\"data\"></div>\n * </pre>\n *\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * Examples for `autoscroll`:\n *\n * <pre>\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * </pre>\n *\n * Resolve data:\n *\n * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n *\n * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n * depends on `$resolve` data.\n *\n * Example usage of $resolve in a view template\n * <pre>\n * $stateProvider.state('home', {\n *   template: '<my-component user=\"$resolve.user\"></my-component>',\n *   resolve: {\n *     user: function(UserService) { return UserService.fetchUser(); }\n *   }\n * });\n * </pre>\n */\n$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];\nfunction $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate,   $q) {\n\n  function getService() {\n    return ($injector.has) ? function(service) {\n      return $injector.has(service) ? $injector.get(service) : null;\n    } : function(service) {\n      try {\n        return $injector.get(service);\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n\n  var service = getService(),\n      $animator = service('$animator'),\n      $animate = service('$animate');\n\n  // Returns a set of DOM manipulation functions based on which Angular version\n  // it should use\n  function getRenderer(attrs, scope) {\n    var statics = function() {\n      return {\n        enter: function (element, target, cb) { target.after(element); cb(); },\n        leave: function (element, cb) { element.remove(); cb(); }\n      };\n    };\n\n    if ($animate) {\n      return {\n        enter: function(element, target, cb) {\n          if (angular.version.minor > 2) {\n            $animate.enter(element, null, target).then(cb);\n          } else {\n            $animate.enter(element, null, target, cb);\n          }\n        },\n        leave: function(element, cb) {\n          if (angular.version.minor > 2) {\n            $animate.leave(element).then(cb);\n          } else {\n            $animate.leave(element, cb);\n          }\n        }\n      };\n    }\n\n    if ($animator) {\n      var animate = $animator && $animator(scope, attrs);\n\n      return {\n        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },\n        leave: function(element, cb) { animate.leave(element); cb(); }\n      };\n    }\n\n    return statics();\n  }\n\n  var directive = {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement, tAttrs, $transclude) {\n      return function (scope, $element, attrs) {\n        var previousEl, currentEl, currentScope, latestLocals,\n            onloadExp     = attrs.onload || '',\n            autoScrollExp = attrs.autoscroll,\n            renderer      = getRenderer(attrs, scope),\n            inherited     = $element.inheritedData('$uiView');\n\n        scope.$on('$stateChangeSuccess', function() {\n          updateView(false);\n        });\n\n        updateView(true);\n\n        function cleanupLastView() {\n          if (previousEl) {\n            previousEl.remove();\n            previousEl = null;\n          }\n\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n\n          if (currentEl) {\n            var $uiViewData = currentEl.data('$uiViewAnim');\n            renderer.leave(currentEl, function() {\n              $uiViewData.$$animLeave.resolve();\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n            currentEl = null;\n          }\n        }\n\n        function updateView(firstTime) {\n          var newScope,\n              name            = getUiViewName(scope, attrs, $element, $interpolate),\n              previousLocals  = name && $state.$current && $state.$current.locals[name];\n\n          if (!firstTime && previousLocals === latestLocals) return; // nothing to do\n          newScope = scope.$new();\n          latestLocals = $state.$current.locals[name];\n\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoading\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description\n           *\n           * Fired once the view **begins loading**, *before* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           * @param {string} viewName Name of the view.\n           */\n          newScope.$emit('$viewContentLoading', name);\n\n          var clone = $transclude(newScope, function(clone) {\n            var animEnter = $q.defer(), animLeave = $q.defer();\n            var viewAnimData = {\n              $animEnter: animEnter.promise,\n              $animLeave: animLeave.promise,\n              $$animLeave: animLeave\n            };\n\n            clone.data('$uiViewAnim', viewAnimData);\n            renderer.enter(clone, $element, function onUiViewEnter() {\n              animEnter.resolve();\n              if(currentScope) {\n                currentScope.$emit('$viewContentAnimationEnded');\n              }\n\n              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n            cleanupLastView();\n          });\n\n          currentEl = clone;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           * @param {string} viewName Name of the view.\n           */\n          currentScope.$emit('$viewContentLoaded', name);\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];\nfunction $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement) {\n      var initial = tElement.html();\n      return function (scope, $element, attrs) {\n        var current = $state.$current,\n            name = getUiViewName(scope, attrs, $element, $interpolate),\n            locals  = current && current.locals[name];\n\n        if (! locals) {\n          return;\n        }\n\n        $element.data('$uiView', { name: name, state: locals.$$state });\n        $element.html(locals.$template ? locals.$template : initial);\n\n        var resolveData = angular.extend({}, locals);\n        scope[locals.$$resolveAs] = resolveData;\n\n        var link = $compile($element.contents());\n\n        if (locals.$$controller) {\n          locals.$scope = scope;\n          locals.$element = $element;\n          var controller = $controller(locals.$$controller, locals);\n          if (locals.$$controllerAs) {\n            scope[locals.$$controllerAs] = controller;\n            scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;\n          }\n          if (isFunction(controller.$onInit)) controller.$onInit();\n          $element.data('$ngControllerController', controller);\n          $element.children().data('$ngControllerController', controller);\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/**\n * Shared ui-view code for both directives:\n * Given scope, element, and its attributes, return the view's name\n */\nfunction getUiViewName(scope, attrs, element, $interpolate) {\n  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);\n  var uiViewCreatedBy = element.inheritedData('$uiView');\n  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : ''));\n}\n\nangular.module('ui.router.state').directive('uiView', $ViewDirective);\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\nfunction parseStateRef(ref, current) {\n  var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\nfunction stateContext(el) {\n  var stateData = el.parent().inheritedData('$uiView');\n\n  if (stateData && stateData.state && stateData.state.name) {\n    return stateData.state;\n  }\n}\n\nfunction getTypeInfo(el) {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  var isForm = el[0].nodeName === \"FORM\";\n\n  return {\n    attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n    isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n    clickable: !isForm\n  };\n}\n\nfunction clickHook(el, $state, $timeout, type, current) {\n  return function(e) {\n    var button = e.which || e.button, target = current();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      var transition = $timeout(function() {\n        $state.go(target.state, target.params, target.options);\n      });\n      e.preventDefault();\n\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\n      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;\n\n      e.preventDefault = function() {\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n      };\n    }\n  };\n}\n\nfunction defaultOpts(el, $state) {\n  return { relative: stateContext(el) || $state.$current, inherit: true };\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref\n *\n * @requires ui.router.state.$state\n * @requires $timeout\n *\n * @restrict A\n *\n * @description\n * A directive that binds a link (`<a>` tag) to a state. If the state has an associated\n * URL, the directive will automatically generate & update the `href` attribute via\n * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking\n * the link will trigger a state transition with optional parameters.\n *\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n * handled natively by the browser.\n *\n * You can also use relative state paths within ui-sref, just like the relative\n * paths passed to `$state.go()`. You just need to be aware that the path is relative\n * to the state that the link lives in, in other words the state that loaded the\n * template containing the link.\n *\n * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,\n * and `reload`.\n *\n * @example\n * Here's an example of how you'd use ui-sref and how it would compile. If you have the\n * following template:\n * <pre>\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * </pre>\n *\n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n * <pre>\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * </pre>\n *\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n */\n$StateRefDirective.$inject = ['$state', '$timeout'];\nfunction $StateRefDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var ref    = parseStateRef(attrs.uiSref, $state.current.name);\n      var def    = { state: ref.state, href: null, params: null };\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var unlinkInfoFn = null;\n      var hookFn;\n\n      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\n      var update = function(val) {\n        if (val) def.params = angular.copy(val);\n        def.href = $state.href(ref.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n        if (def.href !== null) attrs.$set(type.attr, def.href);\n      };\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);\n        def.params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      update();\n\n      if (!type.clickable) return;\n      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });\n      element.bind(\"click\", hookFn);\n      scope.$on('$destroy', function() {\n        element.unbind(\"click\", hookFn);\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-state\n *\n * @requires ui.router.state.uiSref\n *\n * @restrict A\n *\n * @description\n * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n * params and override options.\n *\n * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}\n * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n */\n$StateRefDynamicDirective.$inject = ['$state', '$timeout'];\nfunction $StateRefDynamicDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';\n      var def    = { state: null, params: null, options: null, href: null };\n      var unlinkInfoFn = null;\n      var hookFn;\n\n      function runStateRefLink (group) {\n        def.state = group[0]; def.params = group[1]; def.options = group[2];\n        def.href = $state.href(def.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n        if (def.href) attrs.$set(type.attr, def.href);\n      }\n\n      scope.$watch(watch, runStateRefLink, true);\n      runStateRefLink(scope.$eval(watch));\n\n      if (!type.clickable) return;\n      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });\n      element.bind(\"click\", hookFn);\n      scope.$on('$destroy', function() {\n        element.unbind(\"click\", hookFn);\n      });\n    }\n  };\n}\n\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * A directive working alongside ui-sref to add classes to an element when the\n * related ui-sref directive's state is active, and removing them when it is inactive.\n * The primary use-case is to simplify the special appearance of navigation menus\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n * distinguishing it from the inactive menu items.\n *\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n * ui-sref-active found at the same level or above the ui-sref will be used.\n *\n * Will activate when the ui-sref's target state or any child state is active. If you\n * need to activate only when the ui-sref target state is active and *not* any of\n * it's children, then you will use\n * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}\n *\n * @example\n * Given the following template:\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n *\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n * The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * Multiple classes may be specified in a space-separated format:\n * <pre>\n * <ul>\n *   <li ui-sref-active='class1 class2 class3'>\n *     <a ui-sref=\"app.user\">link</a>\n *   </li>\n * </ul>\n * </pre>\n *\n * It is also possible to pass ui-sref-active an expression that evaluates\n * to an object hash, whose keys represent active class names and whose\n * values represent the respective state names/globs.\n * ui-sref-active will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * @Example\n * Given the following template, with \"admin\" being an abstract state:\n * <pre>\n * <div ui-sref-active=\"{'active': 'admin.*'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * </pre>\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied\n * to both the <div> and <a> elements. It is important to note that the state\n * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n */\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active-eq\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate\n * when the exact target state used in the `ui-sref` is active; no child states.\n *\n */\n$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];\nfunction $StateRefActiveDirective($state, $stateParams, $interpolate) {\n  return  {\n    restrict: \"A\",\n    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\n\n      // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n      try {\n        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n      } catch (e) {\n        // Do nothing. uiSrefActive is not a valid expression.\n        // Fall back to using $interpolate below\n      }\n      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n      if (isObject(uiSrefActive)) {\n        forEach(uiSrefActive, function(stateOrName, activeClass) {\n          if (isString(stateOrName)) {\n            var ref = parseStateRef(stateOrName, $state.current.name);\n            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n          }\n        });\n      }\n\n      // Allow uiSref to communicate with uiSrefActive[Equals]\n      this.$$addStateInfo = function (newState, newParams) {\n        // we already got an explicit state provided by ui-sref-active, so we\n        // shadow the one that comes from ui-sref\n        if (isObject(uiSrefActive) && states.length > 0) {\n          return;\n        }\n        var deregister = addState(newState, newParams, uiSrefActive);\n        update();\n        return deregister;\n      };\n\n      $scope.$on('$stateChangeSuccess', update);\n\n      function addState(stateName, stateParams, activeClass) {\n        var state = $state.get(stateName, stateContext($element));\n        var stateHash = createStateHash(stateName, stateParams);\n\n        var stateInfo = {\n          state: state || { name: stateName },\n          params: stateParams,\n          hash: stateHash\n        };\n\n        states.push(stateInfo);\n        activeClasses[stateHash] = activeClass;\n\n        return function removeState() {\n          var idx = states.indexOf(stateInfo);\n          if (idx !== -1) states.splice(idx, 1);\n        };\n      }\n\n      /**\n       * @param {string} state\n       * @param {Object|string} [params]\n       * @return {string}\n       */\n      function createStateHash(state, params) {\n        if (!isString(state)) {\n          throw new Error('state should be a string');\n        }\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        params = $scope.$eval(params);\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        return state;\n      }\n\n      // Update route state\n      function update() {\n        for (var i = 0; i < states.length; i++) {\n          if (anyMatch(states[i].state, states[i].params)) {\n            addClass($element, activeClasses[states[i].hash]);\n          } else {\n            removeClass($element, activeClasses[states[i].hash]);\n          }\n\n          if (exactMatch(states[i].state, states[i].params)) {\n            addClass($element, activeEqClass);\n          } else {\n            removeClass($element, activeEqClass);\n          }\n        }\n      }\n\n      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\n      function removeClass(el, className) { el.removeClass(className); }\n      function anyMatch(state, params) { return $state.includes(state.name, params); }\n      function exactMatch(state, params) { return $state.is(state.name, params); }\n\n      update();\n    }]\n  };\n}\n\nangular.module('ui.router.state')\n  .directive('uiSref', $StateRefDirective)\n  .directive('uiSrefActive', $StateRefActiveDirective)\n  .directive('uiSrefActiveEq', $StateRefActiveDirective)\n  .directive('uiState', $StateRefDynamicDirective);\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:isState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n */\n$IsStateFilter.$inject = ['$state'];\nfunction $IsStateFilter($state) {\n  var isFilter = function (state, params) {\n    return $state.is(state, params);\n  };\n  isFilter.$stateful = true;\n  return isFilter;\n}\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:includedByState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n */\n$IncludedByStateFilter.$inject = ['$state'];\nfunction $IncludedByStateFilter($state) {\n  var includesFilter = function (state, params, options) {\n    return $state.includes(state, params, options);\n  };\n  includesFilter.$stateful = true;\n  return  includesFilter;\n}\n\nangular.module('ui.router.state')\n  .filter('isState', $IsStateFilter)\n  .filter('includedByState', $IncludedByStateFilter);\n})(window, window.angular);"]}